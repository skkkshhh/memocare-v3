{"file_contents":{"README.md":{"content":"# Memocare - Alzheimer's Care Assistant\n\nA comprehensive web application designed specifically for Alzheimer's patients and their caregivers. Memocare provides essential tools for medication tracking, memory exercises, emergency alerts, and daily routine management.\n\n## Features\n\n### Core Functionality\n- **Medication Management**: Track medications, log doses, and view compliance history\n- **Reminder System**: Customizable reminders with cron scheduling for medications, appointments, and tasks\n- **Contact Management**: People cards with photos, relationships, and quick contact options\n- **Memory Wall**: Upload and organize photos, videos, and audio recordings with tagging\n- **Journal**: Text and voice-to-text journal entries for daily thoughts and memories\n- **Location Tracking**: Record important places and location history\n- **Memory Games**: Daily personalized quizzes based on your contacts and memories\n- **Routines & Tasks**: Structured daily routines with checkable tasks\n- **Emergency Alerts**: One-touch emergency notifications to caregivers and family\n- **Photo Identification**: Camera capture and tagging for identifying people and objects\n\n### Accessibility Features\n- Large, high-contrast interface designed for seniors\n- Voice-to-text functionality using Web Speech API\n- Simple navigation with clear, accessible buttons\n- Real-time notifications for reminders and alerts\n\n## Tech Stack\n\n### Frontend\n- React 18 with TypeScript\n- Tailwind CSS for styling\n- Wouter for routing\n- TanStack Query for data fetching\n- Socket.io for real-time notifications\n\n### Backend\n- Express.js with TypeScript\n- SQLite database with Drizzle ORM\n- Express session-based authentication\n- Socket.io for real-time features\n- Multer for file uploads\n- Node-cron for scheduled reminders\n\n## Installation & Setup\n\n### Prerequisites\n- Node.js 18+ \n- npm or pnpm package manager\n\n### Quick Start\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd memocare\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   # or\n   pnpm install\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   Edit the `.env` file with your configuration.\n\n4. **Initialize the database**\n   ```bash\n   npm run db:push\n   npm run db:seed\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n6. **Access the application**\n   - Open your browser to `http://localhost:5000`\n   - Demo login: `demo@memocare.local` / `demo123`\n\n## Project Structure\n\n","size_bytes":2516},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url:process.env.DATABASE_URL!,\n  },\n});\n\n","size_bytes":326},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Memocare - Alzheimer's Care Assistant\n\n## Overview\n\nMemocare is a comprehensive web application designed specifically for Alzheimer's patients and their caregivers. The application provides essential tools for medication tracking, memory exercises, emergency alerts, and daily care management. Built with accessibility in mind, it features a large, high-contrast interface optimized for seniors, voice-to-text functionality, and real-time notifications to support independent living while keeping caregivers informed.\n\nThe application combines memory care functionality with safety features, including contact management, location tracking, medication compliance monitoring, and emergency alert systems. It serves as a digital companion that helps users maintain their routines, preserve memories, and stay connected with their support network.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client application is built using React 18 with TypeScript, utilizing a modern component-based architecture with shadcn/ui components for consistent design. The frontend employs Wouter for lightweight routing and TanStack Query for efficient server state management and caching. Real-time features are implemented using Socket.io client for instant notifications and updates.\n\nThe UI is specifically designed for accessibility with large touch targets, high contrast colors, and clear typography optimized for seniors. Voice recognition capabilities are integrated using the Web Speech API for hands-free interaction, while camera functionality leverages the native `navigator.mediaDevices.getUserMedia` API for photo capture and identification features.\n\n### Backend Architecture\nThe server runs on Express.js with TypeScript, providing a RESTful API structure with dedicated route handlers for each feature domain (auth, medications, contacts, etc.). The backend implements session-based authentication using express-session with SQLite session storage for simplicity and reliability.\n\nReal-time communication is handled through Socket.io, enabling instant delivery of reminders, emergency alerts, and system notifications. The scheduler system uses node-cron to manage recurring reminders and medication alerts, with flexible cron expression support for complex scheduling needs.\n\n### Data Storage Solutions\nThe application uses SQLite as the primary database with Drizzle ORM for type-safe database operations. The database schema supports comprehensive user data including medications, contacts, locations, journal entries, memory items, routines, and emergency alerts. File uploads (photos, videos, audio) are stored locally using Multer middleware with organized directory structure.\n\nThe SQLite choice provides excellent performance for single-user scenarios while maintaining data integrity and supporting complex queries. The schema is designed to be easily extensible for future features while maintaining referential integrity through proper foreign key relationships.\n\n### Authentication and Authorization\nAuthentication is implemented using express-session with bcrypt for password hashing. The system maintains user sessions through SQLite session storage, providing persistent login across browser sessions. Route protection is implemented through middleware that validates session state before allowing access to protected resources.\n\nThe authentication system is designed for simplicity and reliability, avoiding complex OAuth flows that might confuse elderly users while maintaining security best practices for password storage and session management.\n\n### Real-time Communication\nSocket.io provides bidirectional communication between client and server for instant notifications. The system supports user-specific channels for targeted message delivery, enabling features like medication reminders, emergency alerts, and real-time status updates. Connection management includes automatic reconnection and user room assignment based on authentication state.\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with TypeScript support\n- **Express.js**: Backend web framework with TypeScript\n- **Socket.io**: Real-time bidirectional communication\n- **Drizzle ORM**: Type-safe database operations with SQLite\n- **TanStack Query**: Server state management and caching\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **shadcn/ui components**: Pre-built accessible UI components based on Radix UI\n- **Radix UI primitives**: Low-level accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n\n### Authentication and Security\n- **bcrypt**: Password hashing and verification\n- **express-session**: Session management middleware\n- **connect-sqlite3**: SQLite session store adapter\n\n### File Handling and Storage\n- **Multer**: Multipart form data handling for file uploads\n- **Better SQLite3**: Synchronous SQLite database driver\n- **Local file system**: Photo, video, and audio storage\n\n### Scheduling and Utilities\n- **node-cron**: Task scheduling for reminders and recurring events\n- **nanoid**: Unique ID generation for various entities\n- **cors**: Cross-origin resource sharing configuration\n\n### Browser APIs\n- **Web Speech API**: Voice recognition and text-to-speech\n- **MediaDevices API**: Camera and microphone access\n- **Geolocation API**: Location tracking and positioning services\n- **File API**: File upload and processing capabilities\n\nThe application is designed to work primarily with local resources to ensure reliability and privacy, minimizing external service dependencies while providing comprehensive functionality for Alzheimer's care management.","size_bytes":5773},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/config.ts":{"content":"import path from 'path';\n\nexport const config = {\n  port: parseInt(process.env.PORT || '5000', 10),\n  sessionSecret: process.env.SESSION_SECRET || 'devsecretchange',\n  databaseUrl: process.env.DATABASE_URL || path.resolve('./memocare.db'),\n  uploadDir: process.env.UPLOAD_DIR || './server/public/uploads',\n  clientOrigin: process.env.CLIENT_ORIGIN || 'http://localhost:5173',\n};\n","size_bytes":379},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"../shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = postgres(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });","size_bytes":324},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\nimport { config } from \"./config\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve uploaded files statically\napp.use('/uploads', express.static(config.uploadDir));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\nserver.listen(port, \"0.0.0.0\", () => {\n  log(`serving on http://0.0.0.0:${port}`);\n});\n})();\n","size_bytes":2203},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketServer } from \"socket.io\";\nimport session from \"express-session\";\nimport SQLiteStore from \"connect-sqlite3\";\nimport cors from \"cors\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nimport { storage } from \"./storage\";\nimport { config } from \"./config\";\nimport { ensureAuth } from \"./middleware/auth\";\nimport { upload } from \"./middleware/upload\";\nimport { hashPassword, verifyPassword } from \"./utils/password\";\nimport { loginSchema, registerSchema, reminderSchema, medicationLogSchema, locationLogSchema } from \"./utils/validators\";\nimport { initializeScheduler } from \"./utils/scheduler\";\n\nconst SqliteStore = SQLiteStore(session);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup CORS\n  app.use(cors({\n    origin: config.clientOrigin,\n    credentials: true\n  }));\n\n  // Setup session store\n  app.use(session({\n    store: new SqliteStore({ db: 'sessions.db' }),\n    secret: config.sessionSecret,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false,\n      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n    }\n  }));\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Setup Socket.IO\n  const io = new SocketServer(httpServer, {\n    cors: {\n      origin: config.clientOrigin,\n      credentials: true\n    }\n  });\n\n  // Socket.IO connection handling\n  io.on('connection', (socket) => {\n    console.log('Client connected:', socket.id);\n\n    socket.on('join-user', (userId: number) => {\n      socket.join(`user_${userId}`);\n      console.log(`User ${userId} joined their room`);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('Client disconnected:', socket.id);\n    });\n  });\n\n  // Initialize scheduler with socket.io\n  initializeScheduler(io);\n\n  // Serve uploaded files\n  const uploadsDir = path.join(process.cwd(), 'server/public/uploads');\n  if (!fs.existsSync(uploadsDir)) {\n    fs.mkdirSync(uploadsDir, { recursive: true });\n  }\n  app.use('/uploads', express.static(uploadsDir));\n\n  // Auth routes\n  app.post('/api/auth/register', async (req: Request, res: Response) => {\n    try {\n      const { email, password, name } = registerSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists' });\n      }\n\n      const password_hash = await hashPassword(password);\n      const user = await storage.createUser({ email, password_hash, name });\n      \n      req.session.userId = user.id;\n      res.json({ id: user.id, email: user.email, name: user.name });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req: Request, res: Response) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !(await verifyPassword(password, user.password_hash))) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      req.session.userId = user.id;\n      res.json({ id: user.id, email: user.email, name: user.name });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Could not log out' });\n      }\n      res.json({ message: 'Logged out' });\n    });\n  });\n\n  app.get('/api/auth/me', ensureAuth, async (req: Request, res: Response) => {\n    const user = await storage.getUser(req.session.userId!);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    res.json({ id: user.id, email: user.email, name: user.name });\n  });\n\n  // Reminders routes\n  app.get('/api/reminders', ensureAuth, async (req: Request, res: Response) => {\n    const reminders = await storage.getReminders(req.session.userId!);\n    res.json(reminders);\n  });\n\n  app.post('/api/reminders', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const data = reminderSchema.parse(req.body);\n      const reminder = await storage.createReminder({\n        ...data,\n        user_id: req.session.userId!,\n        next_run_at: new Date(data.next_run_at)\n      });\n      res.json(reminder);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.put('/api/reminders/:id', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      const reminder = await storage.updateReminder(id, updates);\n      res.json(reminder);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.delete('/api/reminders/:id', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteReminder(id);\n      res.json({ message: 'Reminder deleted' });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Medications routes\n  app.get('/api/medications', ensureAuth, async (req: Request, res: Response) => {\n    const medications = await storage.getMedications(req.session.userId!);\n    res.json(medications);\n  });\n\n  app.post('/api/medications', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const medication = await storage.createMedication({\n        ...req.body,\n        user_id: req.session.userId!\n      });\n      res.json(medication);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.get('/api/medications/:id/logs', ensureAuth, async (req: Request, res: Response) => {\n    const medicationId = parseInt(req.params.id);\n    const logs = await storage.getMedicationLogs(medicationId);\n    res.json(logs);\n  });\n\n  app.post('/api/medications/:id/logs', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const medicationId = parseInt(req.params.id);\n      const { status, taken_at } = medicationLogSchema.parse(req.body);\n      const log = await storage.createMedicationLog({\n        medication_id: medicationId,\n        status,\n        taken_at: new Date(taken_at)\n      });\n      res.json(log);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Contacts routes\n  app.get('/api/contacts', ensureAuth, async (req: Request, res: Response) => {\n    const contacts = await storage.getContacts(req.session.userId!);\n    res.json(contacts);\n  });\n\n  app.post('/api/contacts', ensureAuth, upload.single('photo'), async (req: Request, res: Response) => {\n    try {\n      const contact = await storage.createContact({\n        ...req.body,\n        user_id: req.session.userId!,\n        photo_path: req.file ? `/uploads/${req.file.filename}` : null\n      });\n      res.json(contact);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Locations routes\n  app.get('/api/locations', ensureAuth, async (req: Request, res: Response) => {\n    const locations = await storage.getLocations(req.session.userId!);\n    res.json(locations);\n  });\n\n  app.post('/api/locations', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const location = await storage.createLocation({\n        ...req.body,\n        user_id: req.session.userId!\n      });\n      res.json(location);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.get('/api/locations/logs', ensureAuth, async (req: Request, res: Response) => {\n    const logs = await storage.getLocationLogs(req.session.userId!);\n    res.json(logs);\n  });\n\n  app.post('/api/locations/logs', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const { lat, lng } = locationLogSchema.parse(req.body);\n      const log = await storage.createLocationLog({\n        user_id: req.session.userId!,\n        lat,\n        lng\n      });\n      res.json(log);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Journal routes\n  app.get('/api/journal', ensureAuth, async (req: Request, res: Response) => {\n    const entries = await storage.getJournalEntries(req.session.userId!);\n    res.json(entries);\n  });\n\n  app.post('/api/journal', ensureAuth, upload.single('audio'), async (req: Request, res: Response) => {\n    try {\n      const entry = await storage.createJournalEntry({\n        user_id: req.session.userId!,\n        type: req.body.type,\n        content_text: req.body.content_text,\n        audio_path: req.file ? `/uploads/${req.file.filename}` : null\n      });\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Memory wall routes\n  app.get('/api/memory', ensureAuth, async (req: Request, res: Response) => {\n    const items = await storage.getMemoryItems(req.session.userId!);\n    res.json(items);\n  });\n\n  app.post('/api/memory', ensureAuth, upload.single('file'), async (req: Request, res: Response) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'File is required' });\n      }\n\n      const item = await storage.createMemoryItem({\n        user_id: req.session.userId!,\n        type: req.body.type,\n        file_path: `/uploads/${req.file.filename}`,\n        title: req.body.title,\n        tags: req.body.tags\n      });\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Routines routes\n  app.get('/api/routines', ensureAuth, async (req: Request, res: Response) => {\n    const routines = await storage.getRoutines(req.session.userId!);\n    res.json(routines);\n  });\n\n  app.post('/api/routines', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const routine = await storage.createRoutine({\n        ...req.body,\n        user_id: req.session.userId!\n      });\n      res.json(routine);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.get('/api/routines/:id/tasks', ensureAuth, async (req: Request, res: Response) => {\n    const routineId = parseInt(req.params.id);\n    const tasks = await storage.getTasks(routineId);\n    res.json(tasks);\n  });\n\n  app.post('/api/routines/:id/tasks', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const routineId = parseInt(req.params.id);\n      const task = await storage.createTask({\n        ...req.body,\n        routine_id: routineId\n      });\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.put('/api/tasks/:id', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const task = await storage.updateTask(id, req.body);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  // Games/Quiz routes\n  app.get('/api/games/quiz', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      // Generate quiz questions from contacts, medications, and memory items\n      const contacts = await storage.getContacts(req.session.userId!);\n      const medications = await storage.getMedications(req.session.userId!);\n      const memoryItems = await storage.getMemoryItems(req.session.userId!);\n\n      const questions = [];\n\n      // Helper function to generate wrong options that are similar but different\n      const generateOptions = (correct: string, type: string, allData: any[]) => {\n        const options = [correct];\n        const similar = allData.map(item => {\n          if (type === 'relation') return item.relation;\n          if (type === 'dosage') return item.dosage;\n          if (type === 'name') return item.name;\n          return '';\n        }).filter(val => val && val !== correct);\n        \n        // Add some generic options if not enough similar ones\n        const genericOptions = {\n          relation: ['Daughter', 'Son', 'Friend', 'Doctor', 'Neighbor', 'Spouse', 'Caregiver'],\n          dosage: ['5mg', '10mg', '15mg', '20mg', '25mg', '50mg', '100mg'],\n          name: ['John', 'Mary', 'David', 'Sarah', 'Michael', 'Lisa']\n        };\n        \n        const pool = [...similar, ...(genericOptions[type as keyof typeof genericOptions] || [])].filter(opt => opt !== correct);\n        \n        // Randomly select 3 wrong options\n        while (options.length < 4 && pool.length > 0) {\n          const randomIndex = Math.floor(Math.random() * pool.length);\n          const option = pool.splice(randomIndex, 1)[0];\n          if (!options.includes(option)) {\n            options.push(option);\n          }\n        }\n        \n        // Shuffle the options\n        return options.sort(() => 0.5 - Math.random());\n      };\n\n      // Generate questions from contacts\n      contacts.slice(0, 3).forEach(contact => {\n        if (contact.name && contact.relation) {\n          questions.push({\n            type: 'contact',\n            question: `What is ${contact.name}'s relationship to you?`,\n            answer: contact.relation,\n            options: generateOptions(contact.relation, 'relation', contacts)\n          });\n        }\n\n        if (contact.name && contact.phone) {\n          // Create phone number questions (last 4 digits for privacy)\n          const lastFour = contact.phone.slice(-4);\n          questions.push({\n            type: 'contact',\n            question: `What are the last four digits of ${contact.name}'s phone number?`,\n            answer: lastFour,\n            options: [lastFour, \n              Math.floor(Math.random() * 9000 + 1000).toString(),\n              Math.floor(Math.random() * 9000 + 1000).toString(),\n              Math.floor(Math.random() * 9000 + 1000).toString()\n            ].sort(() => 0.5 - Math.random())\n          });\n        }\n      });\n\n      // Generate questions from medications\n      medications.slice(0, 3).forEach(med => {\n        if (med.name && med.dosage) {\n          questions.push({\n            type: 'medication',\n            question: `What is the dosage for ${med.name}?`,\n            answer: med.dosage,\n            options: generateOptions(med.dosage, 'dosage', medications)\n          });\n        }\n\n        if (med.name && med.notes) {\n          questions.push({\n            type: 'medication',\n            question: `What are the notes for ${med.name}?`,\n            answer: med.notes,\n            options: [med.notes, 'Take with food', 'Take on empty stomach', 'Take at bedtime', 'Take with water'].filter((note, index, arr) => arr.indexOf(note) === index).slice(0, 4).sort(() => 0.5 - Math.random())\n          });\n        }\n      });\n\n      // Generate questions from memory items\n      memoryItems.slice(0, 2).forEach(memory => {\n        if (memory.title && memory.tags) {\n          const tags = memory.tags.split(',').map(tag => tag.trim()).filter(Boolean);\n          if (tags.length > 0) {\n            const correctTag = tags[0];\n            questions.push({\n              type: 'memory',\n              question: `Which tag is associated with the memory \"${memory.title}\"?`,\n              answer: correctTag,\n              options: [correctTag, 'family', 'vacation', 'celebration', 'friends'].filter((tag, index, arr) => arr.indexOf(tag) === index).slice(0, 4).sort(() => 0.5 - Math.random())\n            });\n          }\n        }\n\n        if (memory.title && memory.type) {\n          questions.push({\n            type: 'memory',\n            question: `What type of file is \"${memory.title}\"?`,\n            answer: memory.type,\n            options: [memory.type, 'photo', 'video', 'audio'].filter((type, index, arr) => arr.indexOf(type) === index).slice(0, 4).sort(() => 0.5 - Math.random())\n          });\n        }\n      });\n\n      // If no user data, provide default questions\n      if (questions.length === 0) {\n        questions.push(\n          {\n            type: 'general',\n            question: 'What should you do if you miss a medication dose?',\n            answer: 'Take it as soon as you remember',\n            options: ['Take it as soon as you remember', 'Skip it and wait for next dose', 'Take double dose next time', 'Stop taking the medication']\n          },\n          {\n            type: 'general',\n            question: 'How often should you review your medication list with your doctor?',\n            answer: 'At every visit',\n            options: ['At every visit', 'Once a year', 'Only when sick', 'Never needed']\n          },\n          {\n            type: 'general',\n            question: 'What is the most important thing to remember about emergency contacts?',\n            answer: 'Keep them easily accessible',\n            options: ['Keep them easily accessible', 'Memorize all numbers', 'Only use family members', 'Update them monthly']\n          }\n        );\n      }\n\n      // Shuffle and limit to 6 questions\n      const shuffled = questions.sort(() => 0.5 - Math.random());\n      res.json(shuffled.slice(0, 6));\n    } catch (error) {\n      console.error('Error generating quiz questions:', error);\n      res.status(500).json({ message: 'Failed to generate quiz questions' });\n    }\n  });\n\n  // Emergency routes\n  app.get('/api/emergency', ensureAuth, async (req: Request, res: Response) => {\n    const alerts = await storage.getEmergencyAlerts(req.session.userId!);\n    res.json(alerts);\n  });\n\n  app.post('/api/emergency', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const alert = await storage.createEmergencyAlert({\n        user_id: req.session.userId!\n      });\n\n      // Emit emergency alert via socket.io\n      io.to(`user_${req.session.userId}`).emit('emergency:alert', {\n        id: alert.id,\n        message: 'Emergency alert triggered',\n        timestamp: alert.triggered_at\n      });\n\n      res.json(alert);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to create emergency alert' });\n    }\n  });\n\n  app.post('/api/emergency/:id/resolve', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const alert = await storage.resolveEmergencyAlert(id);\n      res.json(alert);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to resolve emergency alert' });\n    }\n  });\n\n  // Identify route (for photo tagging and object recognition)\n  app.post('/api/identify', ensureAuth, upload.single('photo'), async (req: Request, res: Response) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'Photo is required' });\n      }\n\n      const userId = req.session.userId!;\n      const { tags, notes, linked_contact_id, detected_objects, visual_features } = req.body;\n\n      // Store object recognition data if provided\n      if (detected_objects && visual_features && tags) {\n        const objectRecognition = await storage.createObjectRecognition({\n          user_id: userId,\n          photo_path: `/uploads/${req.file.filename}`,\n          user_tag: tags,\n          detected_objects: typeof detected_objects === 'string' ? detected_objects : JSON.stringify(detected_objects),\n          visual_features: typeof visual_features === 'string' ? visual_features : JSON.stringify(visual_features),\n          notes: notes || null,\n          linked_contact_id: linked_contact_id ? parseInt(linked_contact_id) : null\n        });\n\n        res.json({\n          id: objectRecognition.id,\n          photo_path: `/uploads/${req.file.filename}`,\n          message: 'Photo uploaded and tagged successfully',\n          object_recognition: objectRecognition\n        });\n      } else {\n        // Fallback for basic photo upload\n        res.json({\n          photo_path: `/uploads/${req.file.filename}`,\n          message: 'Photo uploaded successfully'\n        });\n      }\n    } catch (error) {\n      console.error('Failed to process photo:', error);\n      res.status(400).json({ message: 'Failed to upload photo' });\n    }\n  });\n\n  // Get user's stored object recognitions\n  app.get('/api/identify/objects', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const userId = req.session.userId!;\n      const objects = await storage.getObjectRecognitions(userId);\n      res.json(objects);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to get object recognitions' });\n    }\n  });\n\n  // Find similar objects for recognition\n  app.post('/api/identify/match', ensureAuth, async (req: Request, res: Response) => {\n    try {\n      const userId = req.session.userId!;\n      const { visual_features } = req.body;\n\n      if (!visual_features) {\n        return res.status(400).json({ message: 'Visual features required' });\n      }\n\n      const similarObjects = await storage.findSimilarObjects(userId, visual_features);\n      res.json(similarObjects);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to find similar objects' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":21153},"server/seed.ts":{"content":"import { db } from './db';\nimport { users, medications, contacts, reminders, memory_items } from '@shared/schema';\nimport { hashPassword } from './utils/password';\n\nasync function seed() {\n  console.log('Seeding database...');\n\n  // Create demo user\n  const passwordHash = await hashPassword('demo123');\n  const [user] = await db.insert(users).values({\n    email: 'demo@memocare.local',\n    password_hash: passwordHash,\n    name: 'John Smith'\n  }).returning();\n\n  console.log('Created demo user:', user.email);\n\n  // Create demo medication\n  await db.insert(medications).values({\n    user_id: user.id,\n    name: 'Aricept',\n    dosage: '10mg',\n    notes: 'Take with breakfast'\n  });\n\n  // Create demo contacts\n  await db.insert(contacts).values([\n    {\n      user_id: user.id,\n      name: 'Sarah Miller',\n      relation: 'Daughter',\n      phone: '(555) 123-4567',\n      email: 'sarah@email.com'\n    },\n    {\n      user_id: user.id,\n      name: 'Dr. Johnson',\n      relation: 'Doctor',\n      phone: '(555) 987-6543',\n      email: 'dr.johnson@clinic.com'\n    }\n  ]);\n\n  // Create demo reminder (every minute for testing)\n  await db.insert(reminders).values({\n    user_id: user.id,\n    title: 'Take morning medication',\n    type: 'medication',\n    schedule_cron: '* * * * *', // Every minute for demo\n    next_run_at: new Date(),\n    active: true\n  });\n\n  // Create demo memory items\n  await db.insert(memory_items).values([\n    {\n      user_id: user.id,\n      type: 'photo',\n      file_path: '/demo/family-dinner.jpg',\n      title: 'Family Dinner',\n      tags: 'family,celebration'\n    },\n    {\n      user_id: user.id,\n      type: 'photo',\n      file_path: '/demo/garden.jpg',\n      title: 'Spring Garden',\n      tags: 'garden,flowers'\n    }\n  ]);\n\n  console.log('Database seeded successfully!');\n}\n\nif (require.main === module) {\n  seed().catch(console.error);\n}\n\nexport { seed };\n","size_bytes":1879},"server/storage.ts":{"content":"import { db } from './db';\nimport { \n  users, reminders, medications, medication_logs, contacts, locations, location_logs,\n  journal_entries, memory_items, routines, tasks, quiz_questions, emergency_alerts,\n  object_recognitions, object_matches,\n  type User, type NewUser, type Reminder, type NewReminder,\n  type Medication, type NewMedication, type MedicationLog, type NewMedicationLog,\n  type Contact, type NewContact, type Location, type NewLocation,\n  type LocationLog, type NewLocationLog, type JournalEntry, type NewJournalEntry,\n  type MemoryItem, type NewMemoryItem, type Routine, type NewRoutine,\n  type Task, type NewTask, type QuizQuestion, type NewQuizQuestion,\n  type EmergencyAlert, type NewEmergencyAlert,\n  type ObjectRecognition, type NewObjectRecognition,\n  type ObjectMatch, type NewObjectMatch\n} from '@shared/schema';\nimport { eq, and, desc } from 'drizzle-orm';\n\nexport interface IStorage {\n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: NewUser): Promise<User>;\n\n  // Reminders\n  getReminders(userId: number): Promise<Reminder[]>;\n  getReminderById(id: number): Promise<Reminder | undefined>;\n  createReminder(reminder: NewReminder): Promise<Reminder>;\n  updateReminder(id: number, updates: Partial<NewReminder>): Promise<Reminder>;\n  deleteReminder(id: number): Promise<void>;\n\n  // Medications\n  getMedications(userId: number): Promise<Medication[]>;\n  getMedicationById(id: number): Promise<Medication | undefined>;\n  createMedication(medication: NewMedication): Promise<Medication>;\n  updateMedication(id: number, updates: Partial<NewMedication>): Promise<Medication>;\n  deleteMedication(id: number): Promise<void>;\n\n  // Medication Logs\n  getMedicationLogs(medicationId: number): Promise<MedicationLog[]>;\n  createMedicationLog(log: NewMedicationLog): Promise<MedicationLog>;\n\n  // Contacts\n  getContacts(userId: number): Promise<Contact[]>;\n  getContactById(id: number): Promise<Contact | undefined>;\n  createContact(contact: NewContact): Promise<Contact>;\n  updateContact(id: number, updates: Partial<NewContact>): Promise<Contact>;\n  deleteContact(id: number): Promise<void>;\n\n  // Locations\n  getLocations(userId: number): Promise<Location[]>;\n  createLocation(location: NewLocation): Promise<Location>;\n  getLocationLogs(userId: number): Promise<LocationLog[]>;\n  createLocationLog(log: NewLocationLog): Promise<LocationLog>;\n\n  // Journal\n  getJournalEntries(userId: number): Promise<JournalEntry[]>;\n  createJournalEntry(entry: NewJournalEntry): Promise<JournalEntry>;\n  deleteJournalEntry(id: number): Promise<void>;\n\n  // Memory Items\n  getMemoryItems(userId: number): Promise<MemoryItem[]>;\n  createMemoryItem(item: NewMemoryItem): Promise<MemoryItem>;\n  deleteMemoryItem(id: number): Promise<void>;\n\n  // Routines & Tasks\n  getRoutines(userId: number): Promise<Routine[]>;\n  createRoutine(routine: NewRoutine): Promise<Routine>;\n  getTasks(routineId: number): Promise<Task[]>;\n  createTask(task: NewTask): Promise<Task>;\n  updateTask(id: number, updates: Partial<NewTask>): Promise<Task>;\n\n  // Quiz\n  getQuizQuestions(userId: number): Promise<QuizQuestion[]>;\n  createQuizQuestion(question: NewQuizQuestion): Promise<QuizQuestion>;\n\n  // Emergency\n  getEmergencyAlerts(userId: number): Promise<EmergencyAlert[]>;\n  createEmergencyAlert(alert: NewEmergencyAlert): Promise<EmergencyAlert>;\n  resolveEmergencyAlert(id: number): Promise<EmergencyAlert>;\n\n  // Object Recognition\n  getObjectRecognitions(userId: number): Promise<ObjectRecognition[]>;\n  createObjectRecognition(recognition: NewObjectRecognition): Promise<ObjectRecognition>;\n  findSimilarObjects(userId: number, visualFeatures: string): Promise<ObjectRecognition[]>;\n  createObjectMatch(match: NewObjectMatch): Promise<ObjectMatch>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(user: NewUser): Promise<User> {\n    const [created] = await db.insert(users).values(user).returning();\n    return created;\n  }\n\n  async getReminders(userId: number): Promise<Reminder[]> {\n    return db.select().from(reminders).where(eq(reminders.user_id, userId));\n  }\n\n  async getReminderById(id: number): Promise<Reminder | undefined> {\n    const [reminder] = await db.select().from(reminders).where(eq(reminders.id, id));\n    return reminder;\n  }\n\n  async createReminder(reminder: NewReminder): Promise<Reminder> {\n    const [created] = await db.insert(reminders).values(reminder).returning();\n    return created;\n  }\n\n  async updateReminder(id: number, updates: Partial<NewReminder>): Promise<Reminder> {\n    const [updated] = await db.update(reminders).set(updates).where(eq(reminders.id, id)).returning();\n    return updated;\n  }\n\n  async deleteReminder(id: number): Promise<void> {\n    await db.delete(reminders).where(eq(reminders.id, id));\n  }\n\n  async getMedications(userId: number): Promise<Medication[]> {\n    return db.select().from(medications).where(eq(medications.user_id, userId));\n  }\n\n  async getMedicationById(id: number): Promise<Medication | undefined> {\n    const [medication] = await db.select().from(medications).where(eq(medications.id, id));\n    return medication;\n  }\n\n  async createMedication(medication: NewMedication): Promise<Medication> {\n    const [created] = await db.insert(medications).values(medication).returning();\n    return created;\n  }\n\n  async updateMedication(id: number, updates: Partial<NewMedication>): Promise<Medication> {\n    const [updated] = await db.update(medications).set(updates).where(eq(medications.id, id)).returning();\n    return updated;\n  }\n\n  async deleteMedication(id: number): Promise<void> {\n    await db.delete(medications).where(eq(medications.id, id));\n  }\n\n  async getMedicationLogs(medicationId: number): Promise<MedicationLog[]> {\n    return db.select().from(medication_logs).where(eq(medication_logs.medication_id, medicationId)).orderBy(desc(medication_logs.taken_at));\n  }\n\n  async createMedicationLog(log: NewMedicationLog): Promise<MedicationLog> {\n    const [created] = await db.insert(medication_logs).values(log).returning();\n    return created;\n  }\n\n  async getContacts(userId: number): Promise<Contact[]> {\n    return db.select().from(contacts).where(eq(contacts.user_id, userId));\n  }\n\n  async getContactById(id: number): Promise<Contact | undefined> {\n    const [contact] = await db.select().from(contacts).where(eq(contacts.id, id));\n    return contact;\n  }\n\n  async createContact(contact: NewContact): Promise<Contact> {\n    const [created] = await db.insert(contacts).values(contact).returning();\n    return created;\n  }\n\n  async updateContact(id: number, updates: Partial<NewContact>): Promise<Contact> {\n    const [updated] = await db.update(contacts).set(updates).where(eq(contacts.id, id)).returning();\n    return updated;\n  }\n\n  async deleteContact(id: number): Promise<void> {\n    await db.delete(contacts).where(eq(contacts.id, id));\n  }\n\n  async getLocations(userId: number): Promise<Location[]> {\n    return db.select().from(locations).where(eq(locations.user_id, userId));\n  }\n\n  async createLocation(location: NewLocation): Promise<Location> {\n    const [created] = await db.insert(locations).values(location).returning();\n    return created;\n  }\n\n  async getLocationLogs(userId: number): Promise<LocationLog[]> {\n    return db.select().from(location_logs).where(eq(location_logs.user_id, userId)).orderBy(desc(location_logs.recorded_at));\n  }\n\n  async createLocationLog(log: NewLocationLog): Promise<LocationLog> {\n    const [created] = await db.insert(location_logs).values(log).returning();\n    return created;\n  }\n\n  async getJournalEntries(userId: number): Promise<JournalEntry[]> {\n    return db.select().from(journal_entries).where(eq(journal_entries.user_id, userId)).orderBy(desc(journal_entries.created_at));\n  }\n\n  async createJournalEntry(entry: NewJournalEntry): Promise<JournalEntry> {\n    const [created] = await db.insert(journal_entries).values(entry).returning();\n    return created;\n  }\n\n  async deleteJournalEntry(id: number): Promise<void> {\n    await db.delete(journal_entries).where(eq(journal_entries.id, id));\n  }\n\n  async getMemoryItems(userId: number): Promise<MemoryItem[]> {\n    return db.select().from(memory_items).where(eq(memory_items.user_id, userId)).orderBy(desc(memory_items.created_at));\n  }\n\n  async createMemoryItem(item: NewMemoryItem): Promise<MemoryItem> {\n    const [created] = await db.insert(memory_items).values(item).returning();\n    return created;\n  }\n\n  async deleteMemoryItem(id: number): Promise<void> {\n    await db.delete(memory_items).where(eq(memory_items.id, id));\n  }\n\n  async getRoutines(userId: number): Promise<Routine[]> {\n    return db.select().from(routines).where(eq(routines.user_id, userId));\n  }\n\n  async createRoutine(routine: NewRoutine): Promise<Routine> {\n    const [created] = await db.insert(routines).values(routine).returning();\n    return created;\n  }\n\n  async getTasks(routineId: number): Promise<Task[]> {\n    return db.select().from(tasks).where(eq(tasks.routine_id, routineId));\n  }\n\n  async createTask(task: NewTask): Promise<Task> {\n    const [created] = await db.insert(tasks).values(task).returning();\n    return created;\n  }\n\n  async updateTask(id: number, updates: Partial<NewTask>): Promise<Task> {\n    const [updated] = await db.update(tasks).set(updates).where(eq(tasks.id, id)).returning();\n    return updated;\n  }\n\n  async getQuizQuestions(userId: number): Promise<QuizQuestion[]> {\n    return db.select().from(quiz_questions).where(eq(quiz_questions.user_id, userId));\n  }\n\n  async createQuizQuestion(question: NewQuizQuestion): Promise<QuizQuestion> {\n    const [created] = await db.insert(quiz_questions).values(question).returning();\n    return created;\n  }\n\n  async getEmergencyAlerts(userId: number): Promise<EmergencyAlert[]> {\n    return db.select().from(emergency_alerts).where(eq(emergency_alerts.user_id, userId)).orderBy(desc(emergency_alerts.triggered_at));\n  }\n\n  async createEmergencyAlert(alert: NewEmergencyAlert): Promise<EmergencyAlert> {\n    const [created] = await db.insert(emergency_alerts).values(alert).returning();\n    return created;\n  }\n\n  async resolveEmergencyAlert(id: number): Promise<EmergencyAlert> {\n    const [resolved] = await db.update(emergency_alerts).set({ \n      status: 'resolved',\n      resolved_at: new Date()\n    }).where(eq(emergency_alerts.id, id)).returning();\n    return resolved;\n  }\n\n  // Object Recognition methods\n  async getObjectRecognitions(userId: number): Promise<ObjectRecognition[]> {\n    return db.select().from(object_recognitions).where(eq(object_recognitions.user_id, userId)).orderBy(desc(object_recognitions.created_at));\n  }\n\n  async createObjectRecognition(recognition: NewObjectRecognition): Promise<ObjectRecognition> {\n    const [created] = await db.insert(object_recognitions).values(recognition).returning();\n    return created;\n  }\n\n  async findSimilarObjects(userId: number, visualFeatures: string): Promise<ObjectRecognition[]> {\n    // For now, return all user's objects for client-side similarity comparison\n    // In a production system, you'd use vector similarity search\n    return db.select().from(object_recognitions).where(eq(object_recognitions.user_id, userId));\n  }\n\n  async createObjectMatch(match: NewObjectMatch): Promise<ObjectMatch> {\n    const [created] = await db.insert(object_matches).values(match).returning();\n    return created;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11796},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, timestamp, boolean, real, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password_hash: text(\"password_hash\").notNull(),\n  name: text(\"name\").notNull(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reminders table\nexport const reminders = pgTable(\"reminders\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // medication|meal|appointment|task\n  schedule_cron: text(\"schedule_cron\").notNull(),\n  next_run_at: timestamp(\"next_run_at\").notNull(),\n  active: boolean(\"active\").default(true),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Medications table\nexport const medications = pgTable(\"medications\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  dosage: text(\"dosage\").notNull(),\n  notes: text(\"notes\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Medication logs table\nexport const medication_logs = pgTable(\"medication_logs\", {\n  id: serial(\"id\").primaryKey(),\n  medication_id: integer(\"medication_id\").notNull().references(() => medications.id),\n  taken_at: timestamp(\"taken_at\").notNull(),\n  status: text(\"status\").notNull(), // taken|missed\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contacts table\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  relation: text(\"relation\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  photo_path: text(\"photo_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Locations table\nexport const locations = pgTable(\"locations\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  lat: real(\"lat\").notNull(),\n  lng: real(\"lng\").notNull(),\n  context: text(\"context\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Location logs table\nexport const location_logs = pgTable(\"location_logs\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  lat: real(\"lat\").notNull(),\n  lng: real(\"lng\").notNull(),\n  recorded_at: timestamp(\"recorded_at\").defaultNow(),\n});\n\n// Journal entries table\nexport const journal_entries = pgTable(\"journal_entries\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // text|audio\n  content_text: text(\"content_text\"),\n  audio_path: text(\"audio_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Memory items table\nexport const memory_items = pgTable(\"memory_items\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // photo|video|audio\n  file_path: text(\"file_path\").notNull(),\n  title: text(\"title\").notNull(),\n  tags: text(\"tags\"), // CSV format\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Routines table\nexport const routines = pgTable(\"routines\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: serial(\"id\").primaryKey(),\n  routine_id: integer(\"routine_id\").notNull().references(() => routines.id),\n  title: text(\"title\").notNull(),\n  done: boolean(\"done\").default(false),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Quiz questions table\nexport const quiz_questions = pgTable(\"quiz_questions\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Emergency alerts table\nexport const emergency_alerts = pgTable(\"emergency_alerts\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  triggered_at: timestamp(\"triggered_at\").defaultNow(),\n  resolved_at: timestamp(\"resolved_at\"),\n  status: text(\"status\").notNull().default(\"active\"), // active|resolved\n});\n\n// Object recognition table - stores user-tagged objects for identification\nexport const object_recognitions = pgTable(\"object_recognitions\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  photo_path: text(\"photo_path\").notNull(),\n  user_tag: text(\"user_tag\").notNull(), // User's description/caption\n  detected_objects: text(\"detected_objects\").notNull(), // JSON array of detected objects with confidence\n  visual_features: text(\"visual_features\"), // Simplified visual signature for matching\n  notes: text(\"notes\"),\n  linked_contact_id: integer(\"linked_contact_id\").references(() => contacts.id),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Object recognition matches - stores when objects are re-identified\nexport const object_matches = pgTable(\"object_matches\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  original_object_id: integer(\"original_object_id\").notNull().references(() => object_recognitions.id),\n  new_photo_path: text(\"new_photo_path\").notNull(),\n  confidence_score: real(\"confidence_score\").notNull(), // Matching confidence 0-1\n  matched_at: timestamp(\"matched_at\").defaultNow(),\n});\n\n// Schemas for validation\nexport const loginSchema = createInsertSchema(users).pick({\n  email: true,\n  password_hash: true,\n});\n\nexport const registerSchema = createInsertSchema(users).pick({\n  email: true,\n  password_hash: true,\n  name: true,\n});\n\nexport const reminderSchema = createInsertSchema(reminders).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const medicationSchema = createInsertSchema(medications).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const contactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const locationSchema = createInsertSchema(locations).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const journalSchema = createInsertSchema(journal_entries).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const memoryItemSchema = createInsertSchema(memory_items).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const routineSchema = createInsertSchema(routines).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const taskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const objectRecognitionSchema = createInsertSchema(object_recognitions).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const objectMatchSchema = createInsertSchema(object_matches).omit({\n  id: true,\n  matched_at: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Reminder = typeof reminders.$inferSelect;\nexport type NewReminder = typeof reminders.$inferInsert;\nexport type Medication = typeof medications.$inferSelect;\nexport type NewMedication = typeof medications.$inferInsert;\nexport type MedicationLog = typeof medication_logs.$inferSelect;\nexport type NewMedicationLog = typeof medication_logs.$inferInsert;\nexport type Contact = typeof contacts.$inferSelect;\nexport type NewContact = typeof contacts.$inferInsert;\nexport type Location = typeof locations.$inferSelect;\nexport type NewLocation = typeof locations.$inferInsert;\nexport type LocationLog = typeof location_logs.$inferSelect;\nexport type NewLocationLog = typeof location_logs.$inferInsert;\nexport type JournalEntry = typeof journal_entries.$inferSelect;\nexport type NewJournalEntry = typeof journal_entries.$inferInsert;\nexport type MemoryItem = typeof memory_items.$inferSelect;\nexport type NewMemoryItem = typeof memory_items.$inferInsert;\nexport type Routine = typeof routines.$inferSelect;\nexport type NewRoutine = typeof routines.$inferInsert;\nexport type Task = typeof tasks.$inferSelect;\nexport type NewTask = typeof tasks.$inferInsert;\nexport type QuizQuestion = typeof quiz_questions.$inferSelect;\nexport type NewQuizQuestion = typeof quiz_questions.$inferInsert;\nexport type EmergencyAlert = typeof emergency_alerts.$inferSelect;\nexport type NewEmergencyAlert = typeof emergency_alerts.$inferInsert;\nexport type ObjectRecognition = typeof object_recognitions.$inferSelect;\nexport type NewObjectRecognition = typeof object_recognitions.$inferInsert;\nexport type ObjectMatch = typeof object_matches.$inferSelect;\nexport type NewObjectMatch = typeof object_matches.$inferInsert;\n","size_bytes":9026},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/context/AuthContext\";\nimport { useAuthContext } from \"@/context/AuthContext\";\nimport { Layout } from \"@/components/Layout\";\n\n// Pages\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Reminders from \"@/pages/Reminders\";\nimport Medications from \"@/pages/Medications\";\nimport Contacts from \"@/pages/Contacts\";\nimport Locations from \"@/pages/Locations\";\nimport Journal from \"@/pages/Journal\";\nimport MemoryWall from \"@/pages/MemoryWall\";\nimport Games from \"@/pages/Games\";\nimport Routines from \"@/pages/Routines\";\nimport Identify from \"@/pages/Identify\";\nimport Emergency from \"@/pages/Emergency\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedApp() {\n  const { isAuthenticated, isLoading } = useAuthContext();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/\" component={Login} />\n        <Route component={Login} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/reminders\" component={Reminders} />\n        <Route path=\"/medications\" component={Medications} />\n        <Route path=\"/contacts\" component={Contacts} />\n        <Route path=\"/locations\" component={Locations} />\n        <Route path=\"/journal\" component={Journal} />\n        <Route path=\"/memory\" component={MemoryWall} />\n        <Route path=\"/routines\" component={Routines} />\n        <Route path=\"/games\" component={Games} />\n        <Route path=\"/identify\" component={Identify} />\n        <Route path=\"/emergency\" component={Emergency} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <AuthenticatedApp />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2500},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(220, 20%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 20%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 20%, 15%);\n  --primary: hsl(188, 85%, 40%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(220, 20%, 15%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 25%, 35%);\n  --accent: hsl(162, 93%, 30%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 72%, 51%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(188, 85%, 40%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(188, 85%, 40%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(162, 93%, 30%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 72%, 51%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(188, 85%, 40%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  .emergency-pulse {\n    animation: pulse 2s infinite;\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 rgba(220, 38, 38, 0.4);\n    }\n    70% {\n      box-shadow: 0 0 0 10px rgba(220, 38, 38, 0);\n    }\n    100% {\n      box-shadow: 0 0 0 0 rgba(220, 38, 38, 0);\n    }\n  }\n\n  .medication-taken {\n    background: linear-gradient(135deg, var(--accent) 0%, hsl(162, 93%, 35%) 100%);\n  }\n\n  .medication-missed {\n    background: linear-gradient(135deg, var(--destructive) 0%, hsl(0, 72%, 56%) 100%);\n  }\n}\n","size_bytes":2967},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: number;\n  }\n}\n\nexport function ensureAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  next();\n}\n","size_bytes":334},"server/middleware/upload.ts":{"content":"import multer from 'multer';\nimport path from 'path';\nimport { config } from '../config';\nimport fs from 'fs';\n\n// Ensure upload directory exists\nif (!fs.existsSync(config.uploadDir)) {\n  fs.mkdirSync(config.uploadDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, config.uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  },\n});\n\nconst fileFilter = (req: any, file: any, cb: any) => {\n  const allowedTypes = /jpeg|jpg|png|gif|mp4|mp3|wav|ogg|webm/;\n  const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n  const mimetype = allowedTypes.test(file.mimetype);\n\n  if (mimetype && extname) {\n    return cb(null, true);\n  } else {\n    cb(new Error('Invalid file type'));\n  }\n};\n\nexport const upload = multer({\n  storage,\n  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB limit\n  fileFilter,\n});\n","size_bytes":1047},"server/utils/password.ts":{"content":"import bcrypt from 'bcrypt';\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n","size_bytes":273},"server/utils/scheduler.ts":{"content":"import cron from 'node-cron';\nimport { db } from '../db';\nimport { reminders } from '@shared/schema';\nimport { eq, and, lte } from 'drizzle-orm';\nimport { Server } from 'socket.io';\n\nlet io: Server;\n\nexport function initializeScheduler(socketServer: Server) {\n  io = socketServer;\n  \n  // Check for due reminders every minute\n  cron.schedule('* * * * *', async () => {\n    try {\n      const now = new Date();\n      const dueReminders = await db\n        .select()\n        .from(reminders)\n        .where(\n          and(\n            eq(reminders.active, true),\n            lte(reminders.next_run_at, now)\n          )\n        );\n\n      for (const reminder of dueReminders) {\n        // Emit reminder via socket.io\n        io.to(`user_${reminder.user_id}`).emit('reminder:due', {\n          id: reminder.id,\n          title: reminder.title,\n          type: reminder.type,\n        });\n\n        console.log(`Reminder fired: ${reminder.title} for user ${reminder.user_id}`);\n\n        // Calculate next run time based on cron expression\n        // For simplicity, we'll add 1 day for now\n        const nextRun = new Date(now);\n        nextRun.setDate(nextRun.getDate() + 1);\n\n        await db\n          .update(reminders)\n          .set({ next_run_at: nextRun })\n          .where(eq(reminders.id, reminder.id));\n      }\n    } catch (error) {\n      console.error('Scheduler error:', error);\n    }\n  });\n}\n","size_bytes":1395},"server/utils/validators.ts":{"content":"import { z } from 'zod';\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  name: z.string().min(1),\n});\n\nexport const reminderSchema = z.object({\n  title: z.string().min(1),\n  type: z.enum(['medication', 'meal', 'appointment', 'task']),\n  schedule_cron: z.string().min(1),\n  next_run_at: z.string().datetime(),\n});\n\nexport const medicationLogSchema = z.object({\n  medication_id: z.number().int().positive(),\n  status: z.enum(['taken', 'missed']),\n  taken_at: z.string().datetime(),\n});\n\nexport const locationLogSchema = z.object({\n  lat: z.number(),\n  lng: z.number(),\n});\n","size_bytes":730},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from 'react';\nimport { Sidebar } from './Sidebar';\nimport { ToastNotifications } from './ToastNotifications';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  return (\n    <div className=\"flex min-h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        {children}\n      </main>\n      <ToastNotifications />\n    </div>\n  );\n}\n","size_bytes":429},"client/src/components/Sidebar.tsx":{"content":"import { useLocation } from 'wouter';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { \n  Home, \n  Bell, \n  Pill, \n  Users, \n  MapPin, \n  Book, \n  Images, \n  List, \n  Gamepad2, \n  Camera, \n  AlertTriangle,\n  Brain,\n  User,\n  LogOut\n} from 'lucide-react';\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: Home },\n  { name: 'Reminders', href: '/reminders', icon: Bell },\n  { name: 'Medications', href: '/medications', icon: Pill },\n  { name: 'People Cards', href: '/contacts', icon: Users },\n  { name: 'Locations', href: '/locations', icon: MapPin },\n  { name: 'Journal', href: '/journal', icon: Book },\n  { name: 'Memory Wall', href: '/memory', icon: Images },\n  { name: 'Routines', href: '/routines', icon: List },\n  { name: 'Memory Games', href: '/games', icon: Gamepad2 },\n  { name: 'Identify', href: '/identify', icon: Camera },\n];\n\nexport function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuthContext();\n\n  return (\n    <aside className=\"w-80 bg-card shadow-lg border-r border-border flex flex-col\" data-testid=\"sidebar\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n            <Brain className=\"text-xl text-primary-foreground\" data-testid=\"logo-icon\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"app-title\">Memocare</h1>\n            <p className=\"text-sm text-muted-foreground\">Care Assistant</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n          \n          return (\n            <Button\n              key={item.name}\n              variant={isActive ? 'default' : 'ghost'}\n              className={`w-full flex items-center justify-start space-x-4 p-4 text-left text-lg h-auto ${\n                isActive \n                  ? 'bg-primary text-primary-foreground shadow-md' \n                  : 'bg-muted hover:bg-accent hover:text-accent-foreground'\n              }`}\n              onClick={() => setLocation(item.href)}\n              data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <Icon className=\"text-2xl\" />\n              <span className=\"font-medium\">{item.name}</span>\n            </Button>\n          );\n        })}\n      </nav>\n      \n      <div className=\"p-4 border-t border-border\">\n        <Button\n          variant=\"outline\"\n          className=\"w-full flex items-center justify-start space-x-4 p-4 text-left text-lg h-auto bg-destructive text-destructive-foreground shadow-md emergency-pulse\"\n          onClick={() => setLocation('/emergency')}\n          data-testid=\"nav-emergency\"\n        >\n          <AlertTriangle className=\"text-2xl\" />\n          <span className=\"font-medium\">Emergency</span>\n        </Button>\n      </div>\n      \n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 p-2\">\n          <div className=\"w-10 h-10 bg-secondary rounded-full flex items-center justify-center\">\n            <User className=\"text-secondary-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"font-medium text-foreground\" data-testid=\"user-name\">\n              {user?.name || 'User'}\n            </p>\n            <button\n              className=\"text-sm text-muted-foreground hover:text-foreground\"\n              onClick={logout}\n              data-testid=\"button-logout\"\n            >\n              Sign out\n            </button>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3880},"client/src/components/ToastNotifications.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { socketManager } from '@/lib/socket';\nimport { useToast } from '@/hooks/use-toast';\nimport { Bell, AlertTriangle } from 'lucide-react';\n\nexport function ToastNotifications() {\n  const { user, isAuthenticated } = useAuthContext();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isAuthenticated || !user) return;\n\n    const socket = socketManager.getSocket();\n    if (!socket) return;\n\n    // Listen for reminder notifications\n    socket.on('reminder:due', (data) => {\n      toast({\n        title: 'Reminder',\n        description: data.title,\n        duration: 10000,\n      });\n    });\n\n    // Listen for emergency alerts\n    socket.on('emergency:alert', (data) => {\n      toast({\n        title: 'Emergency Alert Sent',\n        description: 'Your emergency contacts have been notified.',\n        variant: 'destructive',\n        duration: 10000,\n      });\n    });\n\n    return () => {\n      socket.off('reminder:due');\n      socket.off('emergency:alert');\n    };\n  }, [isAuthenticated, user, toast]);\n\n  return null; // This component doesn't render anything visible\n}\n","size_bytes":1189},"client/src/context/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, ReactNode } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface AuthContextType {\n  user: any;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (variables: { email: string; password: string }) => void;\n  register: (variables: { email: string; password: string; name: string }) => void;\n  logout: () => void;\n  isLoginPending: boolean;\n  isRegisterPending: boolean;\n  loginError: Error | null;\n  registerError: Error | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const auth = useAuth();\n\n  return (\n    <AuthContext.Provider value={auth}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuthContext() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1035},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { authApi } from '@/lib/api';\nimport { socketManager } from '@/lib/socket';\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: ['auth', 'me'],\n    queryFn: authApi.me,\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      authApi.login(email, password),\n    onSuccess: (user) => {\n      queryClient.setQueryData(['auth', 'me'], user);\n      // Connect to socket when user logs in\n      socketManager.connect(user.id);\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: ({ email, password, name }: { email: string; password: string; name: string }) =>\n      authApi.register(email, password, name),\n    onSuccess: (user) => {\n      queryClient.setQueryData(['auth', 'me'], user);\n      socketManager.connect(user.id);\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: authApi.logout,\n    onSuccess: () => {\n      queryClient.setQueryData(['auth', 'me'], null);\n      queryClient.clear();\n      socketManager.disconnect();\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login: loginMutation.mutate,\n    register: registerMutation.mutate,\n    logout: logoutMutation.mutate,\n    isLoginPending: loginMutation.isPending,\n    isRegisterPending: registerMutation.isPending,\n    loginError: loginMutation.error,\n    registerError: registerMutation.error,\n  };\n}\n","size_bytes":1621},"client/src/lib/api.ts":{"content":"import { queryClient } from './queryClient';\n\nconst API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5000';\n\nexport async function api(endpoint: string, options: RequestInit = {}) {\n  const url = `${API_BASE}${endpoint}`;\n  const response = await fetch(url, {\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`${response.status}: ${error}`);\n  }\n\n  return response.json();\n}\n\nexport async function apiFormData(endpoint: string, formData: FormData) {\n  const url = `${API_BASE}${endpoint}`;\n  const response = await fetch(url, {\n    method: 'POST',\n    credentials: 'include',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`${response.status}: ${error}`);\n  }\n\n  return response.json();\n}\n\nexport const authApi = {\n  login: (email: string, password: string) =>\n    api('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    }),\n\n  register: (email: string, password: string, name: string) =>\n    api('/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({ email, password, name }),\n    }),\n\n  logout: () =>\n    api('/api/auth/logout', { method: 'POST' }),\n\n  me: () =>\n    api('/api/auth/me'),\n};\n\nexport const medicationsApi = {\n  list: () => api('/api/medications'),\n  create: (medication: any) =>\n    api('/api/medications', {\n      method: 'POST',\n      body: JSON.stringify(medication),\n    }),\n  logs: (id: number) => api(`/api/medications/${id}/logs`),\n  logDose: (id: number, status: 'taken' | 'missed', taken_at: string) =>\n    api(`/api/medications/${id}/logs`, {\n      method: 'POST',\n      body: JSON.stringify({ status, taken_at }),\n    }),\n};\n\nexport const remindersApi = {\n  list: () => api('/api/reminders'),\n  create: (reminder: any) =>\n    api('/api/reminders', {\n      method: 'POST',\n      body: JSON.stringify(reminder),\n    }),\n  update: (id: number, updates: any) =>\n    api(`/api/reminders/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    }),\n  delete: (id: number) =>\n    api(`/api/reminders/${id}`, { method: 'DELETE' }),\n};\n\nexport const contactsApi = {\n  list: () => api('/api/contacts'),\n  create: (formData: FormData) => apiFormData('/api/contacts', formData),\n};\n\nexport const journalApi = {\n  list: () => api('/api/journal'),\n  create: (formData: FormData) => apiFormData('/api/journal', formData),\n};\n\nexport const memoryApi = {\n  list: () => api('/api/memory'),\n  create: (formData: FormData) => apiFormData('/api/memory', formData),\n};\n\nexport const locationsApi = {\n  list: () => api('/api/locations'),\n  logs: () => api('/api/locations/logs'),\n  logLocation: (lat: number, lng: number) =>\n    api('/api/locations/logs', {\n      method: 'POST',\n      body: JSON.stringify({ lat, lng }),\n    }),\n};\n\nexport const routinesApi = {\n  list: () => api('/api/routines'),\n  create: (routine: any) =>\n    api('/api/routines', {\n      method: 'POST',\n      body: JSON.stringify(routine),\n    }),\n  tasks: (id: number) => api(`/api/routines/${id}/tasks`),\n  createTask: (routineId: number, task: any) =>\n    api(`/api/routines/${routineId}/tasks`, {\n      method: 'POST',\n      body: JSON.stringify(task),\n    }),\n  updateTask: (taskId: number, updates: any) =>\n    api(`/api/tasks/${taskId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    }),\n};\n\nexport const gamesApi = {\n  getQuiz: () => api('/api/games/quiz'),\n};\n\nexport const emergencyApi = {\n  list: () => api('/api/emergency'),\n  trigger: () =>\n    api('/api/emergency', { method: 'POST' }),\n  resolve: (id: number) =>\n    api(`/api/emergency/${id}/resolve`, { method: 'POST' }),\n};\n","size_bytes":3818},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/socket.ts":{"content":"import { io, Socket } from 'socket.io-client';\n\nclass SocketManager {\n  private socket: Socket | null = null;\n\n  connect(userId: number) {\n    if (this.socket?.connected) {\n      return this.socket;\n    }\n\n    const serverUrl = import.meta.env.VITE_API_BASE || 'http://localhost:5000';\n    this.socket = io(serverUrl, {\n      withCredentials: true,\n    });\n\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.socket?.emit('join-user', userId);\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n\n    return this.socket;\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n}\n\nexport const socketManager = new SocketManager();\n","size_bytes":825},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Contacts.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { contactsApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Users, Phone, Mail, Calendar } from 'lucide-react';\n\nexport default function Contacts() {\n  const [showForm, setShowForm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [relationFilter, setRelationFilter] = useState('all');\n  const [formData, setFormData] = useState({\n    name: '',\n    relation: undefined as string | undefined,\n    phone: '',\n    email: '',\n  });\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: contacts = [], isLoading } = useQuery({\n    queryKey: ['contacts'],\n    queryFn: contactsApi.list,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (formDataToSend: FormData) => contactsApi.create(formDataToSend),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['contacts'] });\n      setShowForm(false);\n      setFormData({ name: '', relation: undefined, phone: '', email: '' });\n      setPhotoFile(null);\n      toast({ title: 'Contact added successfully' });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.relation) return;\n\n    const formDataToSend = new FormData();\n    formDataToSend.append('name', formData.name);\n    formDataToSend.append('relation', formData.relation);\n    formDataToSend.append('phone', formData.phone);\n    formDataToSend.append('email', formData.email);\n    if (photoFile) formDataToSend.append('photo', photoFile);\n\n    createMutation.mutate(formDataToSend);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const filteredContacts = contacts.filter((contact: any) => {\n    const matchesSearch = contact.name.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    let matchesRelation = true;\n    if (relationFilter !== 'all') {\n      const relation = contact.relation.toLowerCase();\n      switch (relationFilter) {\n        case 'family':\n          matchesRelation = ['daughter', 'son', 'spouse'].includes(relation);\n          break;\n        case 'friend':\n          matchesRelation = relation === 'friend';\n          break;\n        case 'doctor':\n          matchesRelation = relation === 'doctor';\n          break;\n        case 'neighbor':\n          matchesRelation = ['neighbor', 'caregiver'].includes(relation);\n          break;\n        default:\n          matchesRelation = relation === relationFilter;\n      }\n    }\n    \n    return matchesSearch && matchesRelation;\n  });\n\n  if (isLoading) return <div className=\"p-8\">Loading contacts...</div>;\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"contacts-title\">\n            People Cards\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Keep track of important people in your life\n          </p>\n        </div>\n        <Button onClick={() => setShowForm(!showForm)} data-testid=\"button-add-contact\">\n          <Plus className=\"w-4 h-4 mr-2\" /> Add Person\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"mb-8 flex flex-col md:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search people...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"text-lg p-4\"\n            data-testid=\"input-search-contacts\"\n          />\n        </div>\n        <Select value={relationFilter} onValueChange={setRelationFilter}>\n          <SelectTrigger className=\"text-lg p-4\" data-testid=\"select-relation-filter\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Relations</SelectItem>\n            <SelectItem value=\"family\">Family</SelectItem>\n            <SelectItem value=\"friend\">Friends</SelectItem>\n            <SelectItem value=\"doctor\">Medical</SelectItem>\n            <SelectItem value=\"neighbor\">Neighbors</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Add Contact Form */}\n      {showForm && (\n        <Card className=\"mb-8\" data-testid=\"card-add-contact\">\n          <CardHeader>\n            <CardTitle>Add New Person</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    placeholder=\"John Smith\"\n                    required\n                    data-testid=\"input-contact-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"relation\">Relationship</Label>\n                  <Select\n                    value={formData.relation ?? ''}\n                    onValueChange={(value) => handleInputChange('relation', value)}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-contact-relation\">\n                      <SelectValue placeholder=\"Select relationship\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daughter\">Daughter</SelectItem>\n                      <SelectItem value=\"son\">Son</SelectItem>\n                      <SelectItem value=\"spouse\">Spouse</SelectItem>\n                      <SelectItem value=\"doctor\">Doctor</SelectItem>\n                      <SelectItem value=\"friend\">Friend</SelectItem>\n                      <SelectItem value=\"neighbor\">Neighbor</SelectItem>\n                      <SelectItem value=\"caregiver\">Caregiver</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    placeholder=\"(555) 123-4567\"\n                    data-testid=\"input-contact-phone\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    placeholder=\"john@email.com\"\n                    data-testid=\"input-contact-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"photo\">Photo</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => setPhotoFile(e.target.files?.[0] || null)}\n                  data-testid=\"input-contact-photo\"\n                />\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-save-contact\">\n                  {createMutation.isPending ? 'Adding...' : 'Add Person'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowForm(false)} data-testid=\"button-cancel-contact\">\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Contacts Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredContacts.length === 0 ? (\n          <div className=\"col-span-full\">\n            <Card>\n              <CardContent className=\"py-8 text-center\">\n                <Users className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">\n                  {searchTerm || relationFilter !== 'all' ? 'No contacts found' : 'No contacts added'}\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {searchTerm || relationFilter !== 'all'\n                    ? 'Try adjusting your search or filter'\n                    : 'Add your first contact to get started'}\n                </p>\n                {!searchTerm && relationFilter === 'all' && (\n                  <Button onClick={() => setShowForm(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Person\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          filteredContacts.map((contact: any) => (\n            <Card key={contact.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`contact-card-${contact.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-24 h-24 mx-auto mb-4 rounded-full overflow-hidden bg-secondary flex items-center justify-center\">\n                    {contact.photo_path ? (\n                      <img\n                        src={`${import.meta.env.VITE_API_BASE || 'http://localhost:5000'}${contact.photo_path}`}\n                        alt={`${contact.name} portrait`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <Users className=\"w-12 h-12 text-secondary-foreground\" />\n                    )}\n                  </div>\n                  <h3 className=\"text-2xl font-semibold text-card-foreground\" data-testid={`contact-name-${contact.id}`}>\n                    {contact.name}\n                  </h3>\n                  <span className=\"inline-block px-3 py-1 bg-accent text-accent-foreground rounded-full text-sm font-medium\">\n                    {contact.relation}\n                  </span>\n                </div>\n\n                <div className=\"space-y-3 mb-6\">\n                  {contact.phone && (\n                    <div className=\"flex items-center space-x-3\">\n                      <Phone className=\"text-primary w-4 h-4\" />\n                      <span className=\"text-muted-foreground\">{contact.phone}</span>\n                    </div>\n                  )}\n                  {contact.email && (\n                    <div className=\"flex items-center space-x-3\">\n                      <Mail className=\"text-primary w-4 h-4\" />\n                      <span className=\"text-muted-foreground\">{contact.email}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-3\">\n                    <Calendar className=\"text-primary w-4 h-4\" />\n                    <span className=\"text-muted-foreground\">\n                      Added {new Date(contact.created_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  {contact.phone && (\n                    <Button className=\"flex-1\" onClick={() => window.open(`tel:${contact.phone}`)} data-testid={`button-call-${contact.id}`}>\n                      <Phone className=\"w-4 h-4 mr-2\" /> Call\n                    </Button>\n                  )}\n                  {contact.email && (\n                    <Button className=\"flex-1\" variant=\"secondary\" onClick={() => window.open(`mailto:${contact.email}`)} data-testid={`button-email-${contact.id}`}>\n                      <Mail className=\"w-4 h-4 mr-2\" /> Email\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12737},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { remindersApi, medicationsApi, journalApi, memoryApi, emergencyApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Brain, \n  Plus, \n  AlertTriangle, \n  Bell,\n  Check, \n  X,\n  Clock,\n  Phone\n} from 'lucide-react';\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuthContext();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: reminders = [] } = useQuery({\n    queryKey: ['reminders'],\n    queryFn: remindersApi.list,\n  });\n\n  const { data: medications = [] } = useQuery({\n    queryKey: ['medications'],\n    queryFn: medicationsApi.list,\n  });\n\n  const { data: journalEntries = [] } = useQuery({\n    queryKey: ['journal'],\n    queryFn: journalApi.list,\n  });\n\n  const { data: memoryItems = [] } = useQuery({\n    queryKey: ['memory'],\n    queryFn: memoryApi.list,\n  });\n\n  const emergencyMutation = useMutation({\n    mutationFn: emergencyApi.trigger,\n    onSuccess: () => {\n      toast({\n        title: 'Emergency Alert Sent',\n        description: 'Your emergency contacts have been notified.',\n        variant: 'destructive',\n      });\n      queryClient.invalidateQueries({ queryKey: ['emergency'] });\n    },\n  });\n\n  const todayReminders = reminders.filter((r: any) => r.active).slice(0, 3);\n  const recentJournal = journalEntries.slice(0, 3);\n  const recentMemories = memoryItems.slice(0, 5);\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"welcome-title\">\n          Welcome back, {user?.name || 'User'}!\n        </h2>\n        <p className=\"text-xl text-muted-foreground\" data-testid=\"current-date\">\n          Today is {new Date().toLocaleDateString('en-US', { \n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })}\n        </p>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Button\n          onClick={() => setLocation('/games')}\n          className=\"p-6 bg-accent text-accent-foreground rounded-xl shadow-lg hover:shadow-xl transition-shadow h-auto flex flex-col space-y-3\"\n          data-testid=\"button-daily-quiz\"\n        >\n          <Brain className=\"text-3xl\" />\n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-semibold\">Daily Memory Quiz</h3>\n            <p className=\"text-accent-foreground/80\">Test your memory with today's questions</p>\n          </div>\n        </Button>\n\n        <Button\n          onClick={() => setLocation('/journal')}\n          className=\"p-6 bg-primary text-primary-foreground rounded-xl shadow-lg hover:shadow-xl transition-shadow h-auto flex flex-col space-y-3\"\n          data-testid=\"button-add-journal\"\n        >\n          <Plus className=\"text-3xl\" />\n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-semibold\">Add Journal Entry</h3>\n            <p className=\"text-primary-foreground/80\">Record your thoughts and memories</p>\n          </div>\n        </Button>\n\n        <Button\n          onClick={() => emergencyMutation.mutate()}\n          className=\"p-6 bg-destructive text-destructive-foreground rounded-xl shadow-lg hover:shadow-xl transition-shadow emergency-pulse h-auto flex flex-col space-y-3\"\n          disabled={emergencyMutation.isPending}\n          data-testid=\"button-emergency\"\n        >\n          <AlertTriangle className=\"text-3xl\" />\n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-semibold\">Emergency Help</h3>\n            <p className=\"text-destructive-foreground/80\">Get immediate assistance</p>\n          </div>\n        </Button>\n      </div>\n\n      {/* Today's Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Today's Reminders */}\n        <Card data-testid=\"card-reminders\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl\">Today's Reminders</CardTitle>\n              <Badge variant=\"secondary\" data-testid=\"badge-pending-reminders\">\n                {todayReminders.length} pending\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {todayReminders.length === 0 ? (\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-reminders\">No reminders for today</p>\n              ) : (\n                todayReminders.map((reminder: any) => (\n                  <div key={reminder.id} className=\"flex items-center p-3 bg-muted rounded-lg\" data-testid={`reminder-${reminder.id}`}>\n                    <div className=\"w-3 h-3 bg-accent rounded-full mr-4\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-card-foreground\">{reminder.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {reminder.type} • {new Date(reminder.next_run_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                      </p>\n                    </div>\n                    <Button size=\"sm\" data-testid={`button-complete-reminder-${reminder.id}`}>\n                      <Check className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))\n              )}\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              className=\"w-full mt-4\"\n              onClick={() => setLocation('/reminders')}\n              data-testid=\"button-add-reminder\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add New Reminder\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Medication Tracker */}\n        <Card data-testid=\"card-medications\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl\">Medication Tracker</CardTitle>\n              <Badge variant=\"default\" data-testid=\"badge-medication-status\">On track</Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {medications.length === 0 ? (\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-medications\">No medications added</p>\n              ) : (\n                medications.slice(0, 2).map((med: any) => (\n                  <div key={med.id} className=\"p-4 border border-border rounded-lg\" data-testid={`medication-${med.id}`}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-semibold text-card-foreground\">{med.name}</h4>\n                      <span className=\"text-sm text-muted-foreground\">{med.dosage}</span>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <div className=\"flex-1 grid grid-cols-7 gap-1\">\n                        {[...Array(7)].map((_, index) => (\n                          <div\n                            key={index}\n                            className=\"w-8 h-8 rounded bg-muted flex items-center justify-center\"\n                            data-testid={`medication-day-${index}`}\n                          >\n                            {index < 6 ? (\n                              <Check className=\"w-3 h-3 text-accent\" />\n                            ) : (\n                              <span className=\"text-xs text-muted-foreground\">T</span>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                      <Button size=\"sm\" data-testid={`button-log-medication-${med.id}`}>\n                        Log Dose\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Memory Wall Preview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n        {/* Recent Journal Entries */}\n        <Card data-testid=\"card-journal\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl\">Recent Journal Entries</CardTitle>\n              <Button variant=\"link\" onClick={() => setLocation('/journal')} data-testid=\"button-view-journal\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentJournal.length === 0 ? (\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-journal\">No journal entries yet</p>\n              ) : (\n                recentJournal.map((entry: any) => (\n                  <div key={entry.id} className=\"p-4 bg-muted rounded-lg\" data-testid={`journal-entry-${entry.id}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {new Date(entry.created_at).toLocaleDateString()}\n                      </span>\n                      <Badge variant=\"outline\">{entry.type}</Badge>\n                    </div>\n                    <p className=\"text-card-foreground line-clamp-2\">\n                      {entry.content_text || 'Voice entry'}\n                    </p>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Memory Wall Preview */}\n        <Card data-testid=\"card-memory-wall\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl\">Memory Wall</CardTitle>\n              <Button variant=\"link\" onClick={() => setLocation('/memory')} data-testid=\"button-view-memory\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-3\">\n              {recentMemories.map((memory: any) => (\n                <div\n                  key={memory.id}\n                  className=\"relative aspect-square rounded-lg overflow-hidden group cursor-pointer\"\n                  data-testid={`memory-item-${memory.id}`}\n                >\n                  {memory.type === 'photo' ? (\n                    <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                      <span className=\"text-xs text-muted-foreground\">{memory.title}</span>\n                    </div>\n                  ) : (\n                    <div className=\"w-full h-full bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                      <span className=\"text-white text-xs\">{memory.title}</span>\n                    </div>\n                  )}\n                </div>\n              ))}\n              \n              <Button\n                variant=\"outline\"\n                className=\"aspect-square flex flex-col items-center justify-center\"\n                onClick={() => setLocation('/memory')}\n                data-testid=\"button-add-memory\"\n              >\n                <Plus className=\"w-6 h-6 mb-2\" />\n                <span className=\"text-xs\">Add Memory</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11881},"client/src/pages/Emergency.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { emergencyApi, contactsApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { AlertTriangle, Phone, MapPin, Clock, Check, Users } from 'lucide-react';\n\nexport default function Emergency() {\n  const [isTriggering, setIsTriggering] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: emergencyAlerts = [], isLoading: alertsLoading } = useQuery({\n    queryKey: ['emergency'],\n    queryFn: emergencyApi.list,\n  });\n\n  const { data: contacts = [] } = useQuery({\n    queryKey: ['contacts'],\n    queryFn: contactsApi.list,\n  });\n\n  const triggerEmergencyMutation = useMutation({\n    mutationFn: emergencyApi.trigger,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['emergency'] });\n      setIsTriggering(false);\n      toast({\n        title: 'Emergency Alert Sent',\n        description: 'Your emergency contacts have been notified.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resolveEmergencyMutation = useMutation({\n    mutationFn: (id: number) => emergencyApi.resolve(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['emergency'] });\n      toast({ title: 'Emergency alert resolved' });\n    },\n  });\n\n  const handleEmergencyTrigger = () => {\n    setIsTriggering(true);\n    triggerEmergencyMutation.mutate();\n  };\n\n  const emergencyContacts = contacts.filter((contact: any) => \n    ['family', 'caregiver', 'doctor'].includes(contact.relation.toLowerCase())\n  );\n\n  if (alertsLoading) {\n    return <div className=\"p-8\">Loading emergency information...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 text-center\">\n        <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"emergency-title\">\n          Emergency Help\n        </h2>\n        <p className=\"text-xl text-muted-foreground\">\n          Get immediate assistance when you need it most\n        </p>\n      </div>\n\n      {/* Emergency Trigger Section */}\n      <Card className=\"mb-8 border-destructive/20\" data-testid=\"card-emergency-trigger\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-24 h-24 bg-destructive rounded-full mx-auto mb-6 flex items-center justify-center emergency-pulse\">\n            <AlertTriangle className=\"text-4xl text-destructive-foreground\" />\n          </div>\n          \n          <h3 className=\"text-3xl font-semibold text-card-foreground mb-4\">\n            Need Help?\n          </h3>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Press the button below to immediately notify your emergency contacts and request assistance.\n          </p>\n          \n          <Button\n            size=\"lg\"\n            variant=\"destructive\"\n            onClick={handleEmergencyTrigger}\n            disabled={isTriggering || triggerEmergencyMutation.isPending}\n            className=\"text-xl px-12 py-6 emergency-pulse\"\n            data-testid=\"button-trigger-emergency\"\n          >\n            {isTriggering || triggerEmergencyMutation.isPending ? (\n              'Sending Alert...'\n            ) : (\n              <>\n                <AlertTriangle className=\"w-6 h-6 mr-3\" />\n                Emergency Alert\n              </>\n            )}\n          </Button>\n          \n          <p className=\"text-sm text-muted-foreground mt-4\">\n            This will send alerts to {emergencyContacts.length} emergency contact(s)\n          </p>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Emergency Contacts */}\n        <Card data-testid=\"card-emergency-contacts\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center space-x-2\">\n              <Users className=\"w-6 h-6\" />\n              <span>Emergency Contacts</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {emergencyContacts.length === 0 ? (\n              <div className=\"text-center py-8\" data-testid=\"empty-emergency-contacts\">\n                <Users className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No emergency contacts</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Add family members, caregivers, or doctors as emergency contacts\n                </p>\n                <Button variant=\"outline\">\n                  Add Contacts\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {emergencyContacts.map((contact: any) => (\n                  <div key={contact.id} className=\"p-4 border border-border rounded-lg\" data-testid={`emergency-contact-${contact.id}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-secondary rounded-full flex items-center justify-center\">\n                          <Users className=\"w-6 h-6 text-secondary-foreground\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-card-foreground\">{contact.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{contact.relation}</p>\n                          {contact.phone && (\n                            <p className=\"text-sm text-muted-foreground\">{contact.phone}</p>\n                          )}\n                        </div>\n                      </div>\n                      {contact.phone && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => window.open(`tel:${contact.phone}`)}\n                          data-testid={`button-call-emergency-${contact.id}`}\n                        >\n                          <Phone className=\"w-4 h-4 mr-1\" />\n                          Call\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Emergency History */}\n        <Card data-testid=\"card-emergency-history\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center space-x-2\">\n              <Clock className=\"w-6 h-6\" />\n              <span>Recent Alerts</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {emergencyAlerts.length === 0 ? (\n              <div className=\"text-center py-8\" data-testid=\"empty-emergency-alerts\">\n                <Clock className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No emergency alerts</h3>\n                <p className=\"text-muted-foreground\">\n                  Your emergency alert history will appear here\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {emergencyAlerts.slice(0, 10).map((alert: any) => (\n                  <div key={alert.id} className=\"p-4 border border-border rounded-lg\" data-testid={`alert-${alert.id}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-3 h-3 rounded-full ${alert.resolved ? 'bg-accent' : 'bg-destructive'}`} />\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">\n                            Emergency alert triggered\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(alert.triggered_at).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={alert.resolved ? 'default' : 'destructive'}>\n                          {alert.resolved ? 'Resolved' : 'Active'}\n                        </Badge>\n                        {!alert.resolved && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => resolveEmergencyMutation.mutate(alert.id)}\n                            disabled={resolveEmergencyMutation.isPending}\n                            data-testid={`button-resolve-${alert.id}`}\n                          >\n                            <Check className=\"w-4 h-4 mr-1\" />\n                            Resolve\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Emergency Information */}\n      <Card className=\"mt-8\" data-testid=\"card-emergency-info\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Emergency Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <Phone className=\"w-8 h-8 mx-auto mb-2 text-destructive\" />\n              <h4 className=\"font-semibold mb-1\">Emergency Services</h4>\n              <p className=\"text-sm text-muted-foreground mb-2\">Call 112 for immediate help</p>\n              <Button size=\"sm\" variant=\"destructive\" onClick={() => window.open('tel:112')}>\n                Call 112\n              </Button>\n            </div>\n            \n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <MapPin className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n              <h4 className=\"font-semibold mb-1\">Location Sharing</h4>\n              <p className=\"text-sm text-muted-foreground mb-2\">Your location is shared when alerts are sent</p>\n              <Button size=\"sm\" variant=\"outline\" disabled>\n                Auto-Enabled\n              </Button>\n            </div>\n            \n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <AlertTriangle className=\"w-8 h-8 mx-auto mb-2 text-accent\" />\n              <h4 className=\"font-semibold mb-1\">Alert System</h4>\n              <p className=\"text-sm text-muted-foreground mb-2\">Contacts notified via call, text, and app</p>\n              <Button size=\"sm\" variant=\"outline\" disabled>\n                Active\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10987},"client/src/pages/Games.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { gamesApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { useToast } from '@/hooks/use-toast';\nimport { Brain, Trophy, RotateCcw, Home, ArrowLeft, ArrowRight } from 'lucide-react';\n\ninterface QuizQuestion {\n  type: string;\n  question: string;\n  answer: string;\n  options: string[];\n}\n\nexport default function Games() {\n  const [gameState, setGameState] = useState<'menu' | 'quiz' | 'results'>('menu');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState<string[]>([]);\n  const [currentAnswer, setCurrentAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [timeStarted, setTimeStarted] = useState<Date | null>(null);\n  const { toast } = useToast();\n\n  const { data: questions = [], isLoading, refetch } = useQuery({\n    queryKey: ['quiz-questions'],\n    queryFn: gamesApi.getQuiz,\n    enabled: gameState === 'quiz',\n  });\n\n  const startQuiz = () => {\n    setGameState('quiz');\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setCurrentAnswer('');\n    setScore(0);\n    setTimeStarted(new Date());\n    refetch();\n  };\n\n  const selectAnswer = (answer: string) => {\n    setCurrentAnswer(answer);\n  };\n\n  const nextQuestion = () => {\n    const newAnswers = [...selectedAnswers, currentAnswer];\n    setSelectedAnswers(newAnswers);\n    \n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCurrentAnswer('');\n    } else {\n      // Calculate final score\n      let finalScore = 0;\n      questions.forEach((question: QuizQuestion, index: number) => {\n        if (newAnswers[index]?.toLowerCase() === question.answer.toLowerCase()) {\n          finalScore++;\n        }\n      });\n      setScore(finalScore);\n      setGameState('results');\n    }\n  };\n\n  const previousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n      setCurrentAnswer(selectedAnswers[currentQuestionIndex - 1] || '');\n    }\n  };\n\n  const retakeQuiz = () => {\n    startQuiz();\n  };\n\n  const backToDashboard = () => {\n    setGameState('menu');\n  };\n\n  const getTimeTaken = () => {\n    if (!timeStarted) return '0:00';\n    const seconds = Math.floor((Date.now() - timeStarted.getTime()) / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = questions.length > 0 ? ((currentQuestionIndex + 1) / questions.length) * 100 : 0;\n\n  if (isLoading && gameState === 'quiz') {\n    return (\n      <div className=\"p-8\">\n        <div className=\"text-center\">Loading quiz questions...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Game Menu */}\n        {gameState === 'menu' && (\n          <div>\n            <div className=\"mb-8 text-center\">\n              <h2 className=\"text-4xl font-semibold text-foreground mb-4\" data-testid=\"games-title\">\n                Memory Games\n              </h2>\n              <p className=\"text-xl text-muted-foreground\">\n                Exercise your mind with fun memory challenges\n              </p>\n            </div>\n\n            <Card className=\"max-w-2xl mx-auto\" data-testid=\"card-game-menu\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-24 h-24 bg-accent rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Brain className=\"text-4xl text-accent-foreground\" />\n                </div>\n                <h3 className=\"text-3xl font-semibold text-card-foreground mb-4\">\n                  Daily Memory Quiz\n                </h3>\n                <p className=\"text-lg text-muted-foreground mb-8\">\n                  Test your memory with personalized questions about your contacts, medications, and memories.\n                  The quiz adapts to your personal information to make it meaningful and engaging.\n                </p>\n                \n                <div className=\"grid grid-cols-3 gap-6 mb-8 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-accent\">6</div>\n                    <div className=\"text-sm text-muted-foreground\">Questions</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-primary\">~5 min</div>\n                    <div className=\"text-sm text-muted-foreground\">Duration</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-secondary\">Personal</div>\n                    <div className=\"text-sm text-muted-foreground\">Content</div>\n                  </div>\n                </div>\n\n                <Button \n                  size=\"lg\" \n                  onClick={startQuiz}\n                  className=\"text-xl px-8 py-4\"\n                  data-testid=\"button-start-quiz\"\n                >\n                  Start Quiz\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Quiz Game */}\n        {gameState === 'quiz' && currentQuestion && (\n          <div>\n            <div className=\"mb-8 text-center\">\n              <h2 className=\"text-4xl font-semibold text-foreground mb-4\">Daily Memory Quiz</h2>\n              <p className=\"text-xl text-muted-foreground\">Test your memory with questions about your life</p>\n            </div>\n\n            {/* Quiz Progress */}\n            <Card className=\"mb-8\" data-testid=\"card-quiz-progress\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-2xl font-semibold\">\n                    Question {currentQuestionIndex + 1} of {questions.length}\n                  </h3>\n                  <div className=\"flex space-x-2\">\n                    {questions.map((_: any, index: number) => (\n                      <div\n                        key={index}\n                        className={`w-4 h-4 rounded-full ${\n                          index < currentQuestionIndex\n                            ? 'bg-accent'\n                            : index === currentQuestionIndex\n                            ? 'bg-primary'\n                            : 'bg-muted'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                </div>\n                <Progress value={progress} className=\"h-3\" />\n              </CardContent>\n            </Card>\n\n            {/* Quiz Question */}\n            <Card className=\"mb-8\" data-testid=\"card-quiz-question\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  <div className=\"w-32 h-32 mx-auto mb-6 rounded-full overflow-hidden bg-muted flex items-center justify-center\">\n                    <Brain className=\"w-16 h-16 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-3xl font-semibold text-card-foreground mb-4\">\n                    {currentQuestion.question}\n                  </h3>\n                  <p className=\"text-lg text-muted-foreground\">Select the correct answer</p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n                  {currentQuestion.options.map((option: string, index: number) => (\n                    <Button\n                      key={index}\n                      variant={currentAnswer === option ? 'default' : 'outline'}\n                      className=\"p-6 text-left h-auto justify-start\"\n                      onClick={() => selectAnswer(option)}\n                      data-testid={`button-option-${index}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                          currentAnswer === option \n                            ? 'border-primary bg-primary' \n                            : 'border-muted-foreground'\n                        }`}>\n                          {currentAnswer === option && (\n                            <div className=\"w-2 h-2 rounded-full bg-primary-foreground\"></div>\n                          )}\n                        </div>\n                        <span className=\"text-xl\">{option}</span>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n\n                <div className=\"flex justify-between\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={previousQuestion}\n                    disabled={currentQuestionIndex === 0}\n                    data-testid=\"button-previous\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    Previous\n                  </Button>\n                  <Button\n                    onClick={nextQuestion}\n                    disabled={!currentAnswer}\n                    data-testid=\"button-next\"\n                  >\n                    {currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'}\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Quiz Results */}\n        {gameState === 'results' && (\n          <div>\n            <div className=\"mb-8 text-center\">\n              <h2 className=\"text-4xl font-semibold text-foreground mb-4\">Quiz Complete!</h2>\n              <p className=\"text-xl text-muted-foreground\">Here are your results</p>\n            </div>\n\n            <Card className=\"max-w-2xl mx-auto\" data-testid=\"card-quiz-results\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Trophy className=\"text-2xl text-accent-foreground\" />\n                </div>\n                <h3 className=\"text-2xl font-semibold text-card-foreground mb-2\">Great job!</h3>\n                <p className=\"text-lg text-muted-foreground mb-6\">\n                  You answered {score} out of {questions.length} questions correctly\n                </p>\n\n                <div className=\"grid grid-cols-3 gap-6 mb-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-accent\" data-testid=\"score-percentage\">\n                      {Math.round((score / questions.length) * 100)}%\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Score</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-primary\" data-testid=\"score-fraction\">\n                      {score}/{questions.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Correct</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-secondary\" data-testid=\"time-taken\">\n                      {getTimeTaken()}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Time</div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-4 justify-center\">\n                  <Button \n                    onClick={retakeQuiz}\n                    data-testid=\"button-retake-quiz\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Try Again\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={backToDashboard}\n                    data-testid=\"button-back-dashboard\"\n                  >\n                    <Home className=\"w-4 h-4 mr-2\" />\n                    Back to Dashboard\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12593},"client/src/pages/Identify.tsx":{"content":"\"use client\";\n\nimport { useState, useRef, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiFormData } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { Camera, Upload, Tag, Users, Scan, Brain, Check, Eye } from 'lucide-react';\nimport { processImageForRecognition, findMatches, type DetectedObject, type ObjectSignature } from '@/lib/objectDetection';\n\nexport default function Identify() {\n  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [tags, setTags] = useState('');\n  const [linkedContactId, setLinkedContactId] = useState<string | undefined>(undefined);\n  const [notes, setNotes] = useState('');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [detectedObjects, setDetectedObjects] = useState<DetectedObject[]>([]);\n  const [objectSignature, setObjectSignature] = useState<ObjectSignature | null>(null);\n  const [matchedObjects, setMatchedObjects] = useState<Array<{ id: number; userTag: string; confidence: number }>>([]);\n  const [modelLoading, setModelLoading] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: contacts = [] } = useQuery({\n    queryKey: ['contacts'],\n    queryFn: async () => {\n      const response = await fetch('/api/contacts');\n      if (!response.ok) throw new Error('Failed to fetch contacts');\n      return response.json();\n    },\n  });\n\n  // Query for stored object recognitions\n  const { data: storedObjects = [] } = useQuery({\n    queryKey: ['object-recognitions'],\n    queryFn: async () => {\n      const response = await fetch('/api/identify/objects');\n      if (!response.ok) throw new Error('Failed to fetch objects');\n      return response.json();\n    },\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: (formData: FormData) => apiFormData('/api/identify', formData),\n    onSuccess: () => {\n      toast({ \n        title: 'Photo uploaded successfully',\n        description: 'Photo has been tagged and saved'\n      });\n      queryClient.invalidateQueries({ queryKey: ['object-recognitions'] });\n      resetForm();\n    },\n  });\n\n  // --- CAMERA FUNCTIONS ---\n  const startCamera = async () => {\n    try {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n        streamRef.current = null;\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });\n      streamRef.current = stream;\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        setTimeout(() => {\n          videoRef.current?.play().catch(() => {\n            console.warn('Autoplay prevented; user interaction needed');\n          });\n        }, 100);\n      }\n\n      setIsCapturing(true);\n    } catch {\n      toast({\n        title: 'Camera error',\n        description: 'Could not access camera. Check permissions.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    if (videoRef.current) videoRef.current.srcObject = null;\n    setIsCapturing(false);\n  };\n\n  const capturePhoto = () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    canvas.toBlob(blob => {\n      if (blob) {\n        const file = new File([blob], 'captured-photo.jpg', { type: 'image/jpeg' });\n        setPhotoFile(file);\n        setCapturedPhoto(URL.createObjectURL(blob));\n        \n        // Automatically analyze the captured photo\n        analyzePhoto(canvas);\n      }\n    }, 'image/jpeg', 0.8);\n\n    stopCamera();\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setPhotoFile(file);\n      const photoUrl = URL.createObjectURL(file);\n      setCapturedPhoto(photoUrl);\n      \n      // Analyze uploaded photo\n      const img = new Image();\n      img.onload = () => analyzePhoto(img);\n      img.src = photoUrl;\n    }\n  };\n\n  // Object recognition analysis\n  const analyzePhoto = async (imageElement: HTMLImageElement | HTMLCanvasElement) => {\n    setIsAnalyzing(true);\n    setModelLoading(true);\n    \n    try {\n      const { detectedObjects, signature, visualFeatures } = await processImageForRecognition(imageElement);\n      \n      setDetectedObjects(detectedObjects);\n      setObjectSignature(signature);\n      setModelLoading(false);\n      \n      // Find matches with stored objects\n      if (storedObjects.length > 0) {\n        const storedSignatures = storedObjects.map((obj: any) => ({\n          id: obj.id,\n          signature: JSON.parse(obj.visual_features),\n          userTag: obj.user_tag\n        }));\n        \n        const matches = findMatches(signature, storedSignatures);\n        setMatchedObjects(matches);\n        \n        if (matches.length > 0) {\n          toast({\n            title: 'Object recognized!',\n            description: `Found ${matches.length} similar object(s) from your history`,\n          });\n        }\n      }\n      \n    } catch (error) {\n      console.error('Object analysis failed:', error);\n      toast({\n        title: 'Analysis failed',\n        description: 'Could not analyze the photo. Please try again.',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsAnalyzing(false);\n      setModelLoading(false);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!photoFile) {\n      toast({\n        title: 'No photo selected',\n        description: 'Please capture or upload a photo first',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('photo', photoFile);\n    formData.append('tags', tags);\n    if (linkedContactId) formData.append('linked_contact_id', linkedContactId);\n    formData.append('notes', notes);\n    \n    // Include object recognition data if available\n    if (detectedObjects.length > 0) {\n      formData.append('detected_objects', JSON.stringify(detectedObjects));\n    }\n    if (objectSignature) {\n      formData.append('visual_features', JSON.stringify(objectSignature));\n    }\n\n    uploadMutation.mutate(formData);\n  };\n\n  const resetForm = () => {\n    setCapturedPhoto(null);\n    setPhotoFile(null);\n    setTags('');\n    setLinkedContactId(undefined);\n    setNotes('');\n    setDetectedObjects([]);\n    setObjectSignature(null);\n    setMatchedObjects([]);\n    setIsAnalyzing(false);\n    stopCamera();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-4xl font-semibold mb-4\">Identify & Tag</h2>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Camera & Upload */}\n        <Card>\n          <CardHeader><CardTitle>Capture / Upload Photo</CardTitle></CardHeader>\n          <CardContent className=\"space-y-4\">\n            {!capturedPhoto && !isCapturing && (\n              <div className=\"text-center py-8 border-2 border-dashed rounded-lg\">\n                <Camera className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\"/>\n                <div className=\"flex justify-center gap-4\">\n                  <Button onClick={startCamera}><Camera className=\"w-4 h-4 mr-2\"/>Use Camera</Button>\n                  <Label htmlFor=\"photo-upload\" className=\"cursor-pointer\">\n                    <Button variant=\"outline\" asChild>\n                      <span><Upload className=\"w-4 h-4 mr-2\"/>Upload Photo</span>\n                    </Button>\n                  </Label>\n                  <Input id=\"photo-upload\" type=\"file\" accept=\"image/*\" className=\"hidden\" onChange={handleFileUpload}/>\n                </div>\n              </div>\n            )}\n\n            {isCapturing && (\n              <div className=\"relative\">\n                <video ref={videoRef} autoPlay playsInline className=\"w-full rounded-lg\"/>\n                <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-4\">\n                  <Button onClick={capturePhoto} size=\"lg\" className=\"rounded-full h-16 w-16\"><Camera className=\"w-6 h-6\"/></Button>\n                  <Button onClick={stopCamera} variant=\"outline\">Cancel</Button>\n                </div>\n              </div>\n            )}\n\n            {capturedPhoto && (\n              <div className=\"relative\">\n                <img ref={imageRef} src={capturedPhoto} alt=\"Captured\" className=\"w-full rounded-lg\"/>\n                <Button onClick={resetForm} variant=\"outline\" className=\"absolute top-2 right-2\">Retake</Button>\n                \n                {(isAnalyzing || modelLoading) && (\n                  <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center rounded-lg\">\n                    <div className=\"text-white text-center\">\n                      <Brain className=\"w-8 h-8 mx-auto mb-2 animate-pulse\"/>\n                      <p>{modelLoading ? 'Loading AI model...' : 'Analyzing objects...'}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <canvas ref={canvasRef} className=\"hidden\"/>\n          </CardContent>\n        </Card>\n\n        {/* Analysis Results & Tagging */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"w-5 h-5\"/>\n              Tag & Identify\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            \n            {/* Object Recognition Results */}\n            {detectedObjects.length > 0 && (\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Detected Objects</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {detectedObjects.map((obj, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      <Scan className=\"w-3 h-3\"/>\n                      {obj.class} ({Math.round(obj.score * 100)}%)\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Matched Objects */}\n            {matchedObjects.length > 0 && (\n              <Alert>\n                <Check className=\"w-4 h-4\"/>\n                <AlertDescription>\n                  <strong>Object recognized!</strong> Found {matchedObjects.length} similar item(s):\n                  <div className=\"mt-2 space-y-1\">\n                    {matchedObjects.map((match, index) => (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">\"{match.userTag}\"</span>\n                        <Badge variant=\"outline\">{Math.round(match.confidence * 100)}% match</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label>Your Tag/Description</Label>\n                <Input \n                  value={tags} \n                  onChange={(e) => setTags(e.target.value)} \n                  placeholder={detectedObjects.length > 0 ? \n                    `Describe this ${detectedObjects[0]?.class || 'object'}...` : \n                    \"Describe what you see...\"\n                  }\n                />\n                {matchedObjects.length > 0 && (\n                  <div className=\"mt-2\">\n                    <p className=\"text-sm text-muted-foreground mb-1\">Quick fill from matches:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {matchedObjects.slice(0, 3).map((match, index) => (\n                        <Button\n                          key={index}\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setTags(match.userTag)}\n                          className=\"text-xs\"\n                        >\n                          {match.userTag}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label>Link to Contact</Label>\n                <Select value={linkedContactId} onValueChange={setLinkedContactId}>\n                  <SelectTrigger><SelectValue placeholder=\"Select a person (optional)\"/></SelectTrigger>\n                  <SelectContent>\n                    {contacts.map((contact: any) => (\n                      <SelectItem key={contact.id} value={contact.id.toString()}>\n                        {contact.name} ({contact.relation})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Notes</Label>\n                <Input value={notes} onChange={(e) => setNotes(e.target.value)} placeholder=\"Additional notes\"/>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={!photoFile || uploadMutation.isPending}>\n                {uploadMutation.isPending ? 'Saving...' : \n                 detectedObjects.length > 0 ? 'Save Identified Object' : 'Save Photo & Tags'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14548},"client/src/pages/Journal.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { journalApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Keyboard, Mic, Play, OctagonMinus, Pause, Download, Edit, Trash2 } from 'lucide-react';\n\nexport default function Journal() {\n  const [entryType, setEntryType] = useState<'text' | 'voice'>('text');\n  const [textContent, setTextContent] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const recognitionRef = useRef<any>(null);\n  const [currentlyPlaying, setCurrentlyPlaying] = useState<number | null>(null);\n  const audioRefs = useRef<{ [key: number]: HTMLAudioElement }>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: journalEntries = [], isLoading } = useQuery({\n    queryKey: ['journal'],\n    queryFn: journalApi.list,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (formData: FormData) => journalApi.create(formData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['journal'] });\n      setTextContent('');\n      setTranscription('');\n      setAudioBlob(null);\n      toast({ title: 'Journal entry saved successfully' });\n    },\n  });\n\n  const startVoiceRecording = async () => {\n    try {\n      // Start audio recording\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      const chunks: BlobPart[] = [];\n\n      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: 'audio/wav' });\n        setAudioBlob(blob);\n      };\n\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.start();\n\n      // Start speech recognition\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n        const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\n        const recognition = new SpeechRecognition();\n        \n        recognition.continuous = true;\n        recognition.interimResults = true;\n        recognition.lang = 'en-US';\n\n        recognition.onresult = (event: any) => {\n          let finalTranscript = '';\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            if (event.results[i].isFinal) {\n              finalTranscript += event.results[i][0].transcript;\n            }\n          }\n          if (finalTranscript) {\n            setTranscription(prev => prev + finalTranscript + ' ');\n          }\n        };\n\n        recognition.onerror = (event: any) => {\n          console.error('Speech recognition error:', event.error);\n        };\n\n        recognitionRef.current = recognition;\n        recognition.start();\n      }\n\n      setIsRecording(true);\n    } catch (error) {\n      toast({\n        title: 'Recording failed',\n        description: 'Could not access microphone',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const stopVoiceRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n    }\n    \n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    \n    setIsRecording(false);\n  };\n\n  const playPreviewAudio = () => {\n    if (audioBlob) {\n      const audio = new Audio(URL.createObjectURL(audioBlob));\n      audio.play();\n    }\n  };\n\n  const playAudio = (entryId: number, audioPath: string) => {\n    if (currentlyPlaying === entryId) {\n      // Stop current audio\n      if (audioRefs.current[entryId]) {\n        audioRefs.current[entryId].pause();\n        audioRefs.current[entryId].currentTime = 0;\n      }\n      setCurrentlyPlaying(null);\n      return;\n    }\n\n    // Stop any currently playing audio\n    if (currentlyPlaying && audioRefs.current[currentlyPlaying]) {\n      audioRefs.current[currentlyPlaying].pause();\n      audioRefs.current[currentlyPlaying].currentTime = 0;\n    }\n\n    // Create and play new audio\n    if (!audioRefs.current[entryId]) {\n      audioRefs.current[entryId] = new Audio(audioPath);\n      audioRefs.current[entryId].addEventListener('ended', () => {\n        setCurrentlyPlaying(null);\n      });\n    }\n    \n    audioRefs.current[entryId].play();\n    setCurrentlyPlaying(entryId);\n  };\n\n  const downloadAudio = (audioPath: string, entryId: number) => {\n    const link = document.createElement('a');\n    link.href = audioPath;\n    link.download = `journal-entry-${entryId}.wav`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const saveEntry = () => {\n    const formData = new FormData();\n    \n    if (entryType === 'text') {\n      if (!textContent.trim()) {\n        toast({\n          title: 'No content',\n          description: 'Please enter some text before saving',\n          variant: 'destructive',\n        });\n        return;\n      }\n      formData.append('type', 'text');\n      formData.append('content_text', textContent);\n    } else {\n      if (!audioBlob || !transcription.trim()) {\n        toast({\n          title: 'No content',\n          description: 'Please record audio before saving',\n          variant: 'destructive',\n        });\n        return;\n      }\n      formData.append('type', 'audio');\n      formData.append('content_text', transcription);\n      formData.append('audio', audioBlob, 'journal-entry.wav');\n    }\n\n    createMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading journal entries...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"journal-title\">\n            Personal Journal\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Record your thoughts, memories, and daily experiences\n          </p>\n        </div>\n      </div>\n\n      {/* New Entry Form */}\n      <Card className=\"mb-8\" data-testid=\"card-new-entry\">\n        <CardHeader>\n          <CardTitle>Write New Entry</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Entry Type Selection */}\n          <div>\n            <label className=\"block text-lg font-medium text-card-foreground mb-2\">Entry Type</label>\n            <div className=\"flex space-x-4\">\n              <Button\n                variant={entryType === 'text' ? 'default' : 'outline'}\n                className=\"flex-1 p-4 h-auto flex flex-col space-y-2\"\n                onClick={() => setEntryType('text')}\n                data-testid=\"button-text-entry\"\n              >\n                <Keyboard className=\"text-2xl\" />\n                <div>Text Entry</div>\n              </Button>\n              <Button\n                variant={entryType === 'voice' ? 'default' : 'outline'}\n                className=\"flex-1 p-4 h-auto flex flex-col space-y-2\"\n                onClick={() => setEntryType('voice')}\n                data-testid=\"button-voice-entry\"\n              >\n                <Mic className=\"text-2xl\" />\n                <div>Voice Entry</div>\n              </Button>\n            </div>\n          </div>\n\n          {/* Text Entry Area */}\n          {entryType === 'text' && (\n            <div>\n              <label className=\"block text-lg font-medium text-card-foreground mb-2\">Your thoughts</label>\n              <Textarea\n                value={textContent}\n                onChange={(e) => setTextContent(e.target.value)}\n                placeholder=\"What would you like to remember about today?\"\n                className=\"h-40 text-lg resize-none\"\n                data-testid=\"textarea-journal-content\"\n              />\n            </div>\n          )}\n\n          {/* Voice Recording Controls */}\n          {entryType === 'voice' && (\n            <div className=\"space-y-4\">\n              {!isRecording && !audioBlob && (\n                <div className=\"text-center py-8\">\n                  <Button\n                    size=\"lg\"\n                    onClick={startVoiceRecording}\n                    className=\"h-20 w-20 rounded-full\"\n                    data-testid=\"button-start-recording\"\n                  >\n                    <Mic className=\"text-2xl\" />\n                  </Button>\n                  <p className=\"mt-4 text-muted-foreground\">Tap to start recording</p>\n                </div>\n              )}\n\n              {isRecording && (\n                <div className=\"bg-muted p-6 rounded-lg text-center\">\n                  <div className=\"mb-4\">\n                    <div className=\"w-16 h-16 bg-destructive rounded-full mx-auto flex items-center justify-center animate-pulse\">\n                      <Mic className=\"text-2xl text-destructive-foreground\" />\n                    </div>\n                  </div>\n                  <p className=\"text-lg text-card-foreground mb-4\">Recording... Speak clearly</p>\n                  <Button\n                    onClick={stopVoiceRecording}\n                    variant=\"destructive\"\n                    data-testid=\"button-stop-recording\"\n                  >\n                    <OctagonMinus className=\"w-4 h-4 mr-2\" />\n                    OctagonMinus Recording\n                  </Button>\n                  {transcription && (\n                    <div className=\"mt-4 p-4 bg-background rounded border\">\n                      <p className=\"text-sm text-muted-foreground mb-2\">Live transcription:</p>\n                      <p className=\"text-card-foreground\">{transcription}</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {audioBlob && !isRecording && (\n                <div className=\"space-y-4\">\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Recording completed</p>\n                    <div className=\"flex items-center space-x-4\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={playPreviewAudio} data-testid=\"button-play-recording\">\n                        <Play className=\"w-4 h-4\" />\n                      </Button>\n                      <div className=\"flex-1 bg-background rounded-full h-2\">\n                        <div className=\"bg-primary h-2 rounded-full w-0\"></div>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">0:00</span>\n                    </div>\n                  </div>\n                  \n                  {transcription && (\n                    <div className=\"bg-background p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-card-foreground mb-2\">Transcription:</h4>\n                      <Textarea\n                        value={transcription}\n                        onChange={(e) => setTranscription(e.target.value)}\n                        className=\"min-h-[100px]\"\n                        data-testid=\"textarea-transcription\"\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex space-x-4\">\n            <Button\n              onClick={saveEntry}\n              disabled={createMutation.isPending}\n              data-testid=\"button-save-entry\"\n            >\n              {createMutation.isPending ? 'Saving...' : 'Save Entry'}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setTextContent('');\n                setTranscription('');\n                setAudioBlob(null);\n                setEntryType('text');\n              }}\n              data-testid=\"button-clear-entry\"\n            >\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Entries */}\n      <div className=\"space-y-6\">\n        <h3 className=\"text-2xl font-semibold text-foreground\">Recent Entries</h3>\n\n        {journalEntries.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-8\">\n              <div className=\"text-center\" data-testid=\"empty-journal\">\n                <Plus className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No journal entries yet</h3>\n                <p className=\"text-muted-foreground\">Start writing your first entry above</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          journalEntries.map((entry: any) => (\n            <Card key={entry.id} data-testid={`journal-entry-${entry.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    {entry.type === 'text' ? (\n                      <Keyboard className=\"text-primary\" />\n                    ) : (\n                      <Mic className=\"text-accent\" />\n                    )}\n                    <span className=\"text-lg font-medium text-card-foreground\">\n                      {entry.type === 'text' ? 'Text Entry' : 'Voice Entry'}\n                    </span>\n                    {entry.type === 'audio' && (\n                      <span className=\"text-sm text-muted-foreground\">(Audio recording)</span>\n                    )}\n                  </div>\n                  <div className=\"text-muted-foreground\">\n                    {new Date(entry.created_at).toLocaleString()}\n                  </div>\n                </div>\n\n                {entry.type === 'audio' && entry.audio_path && (\n                  <div className=\"bg-muted p-4 rounded-lg mb-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Button \n                        size=\"sm\" \n                        onClick={() => playAudio(entry.id, entry.audio_path)}\n                        data-testid={`button-play-${entry.id}`}\n                      >\n                        {currentlyPlaying === entry.id ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                      </Button>\n                      <div className=\"flex-1 bg-background rounded-full h-2\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: '30%' }}></div>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">1:30</div>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => downloadAudio(entry.audio_path, entry.id)}\n                        data-testid={`button-download-${entry.id}`}\n                      >\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {entry.content_text && (\n                  <div className=\"mb-4\">\n                    {entry.type === 'audio' && (\n                      <h4 className=\"font-medium text-card-foreground mb-2\">Transcription:</h4>\n                    )}\n                    <p className=\"text-lg text-card-foreground leading-relaxed\">\n                      {entry.content_text}\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"flex space-x-2\">\n                  <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-${entry.id}`}>\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" data-testid={`button-delete-${entry.id}`}>\n                    <Trash2 className=\"w-4 h-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16345},"client/src/pages/Locations.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { locationsApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { MapPin, Navigation, Clock, Plus, Loader2 } from 'lucide-react';\n\nexport default function Locations() {\n  const [showForm, setShowForm] = useState(false);\n  const [isLocating, setIsLocating] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    address: '',\n    context: '',\n    lat: 0,\n    lng: 0,\n  });\n  const [locationAddresses, setLocationAddresses] = useState<{ [key: string]: string }>({});\n  const [loadingAddresses, setLoadingAddresses] = useState<{ [key: string]: boolean }>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Function to get descriptive address from coordinates\n  const getAddressFromCoordinates = async (lat: number, lng: number): Promise<string> => {\n    try {\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`\n      );\n      const data = await response.json();\n      \n      if (data.display_name) {\n        // Extract meaningful parts of the address\n        const address = data.address || {};\n        const parts = [];\n        \n        if (address.house_number && address.road) {\n          parts.push(`${address.house_number} ${address.road}`);\n        } else if (address.road) {\n          parts.push(address.road);\n        }\n        \n        if (address.neighbourhood || address.suburb || address.hamlet) {\n          parts.push(address.neighbourhood || address.suburb || address.hamlet);\n        }\n        \n        if (address.city || address.town || address.village) {\n          parts.push(address.city || address.town || address.village);\n        }\n        \n        if (address.state) {\n          parts.push(address.state);\n        }\n        \n        return parts.length > 0 ? parts.join(', ') : data.display_name;\n      }\n      \n      return `Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}`;\n    } catch (error) {\n      console.error('Failed to get address:', error);\n      return `Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}`;\n    }\n  };\n\n  // Function to load address for a coordinate\n  const loadAddressForLocation = async (id: string, lat: number, lng: number) => {\n    if (locationAddresses[id] || loadingAddresses[id]) return;\n    \n    setLoadingAddresses(prev => ({ ...prev, [id]: true }));\n    \n    try {\n      const address = await getAddressFromCoordinates(lat, lng);\n      setLocationAddresses(prev => ({ ...prev, [id]: address }));\n    } finally {\n      setLoadingAddresses(prev => ({ ...prev, [id]: false }));\n    }\n  };\n\n  const { data: locations = [], isLoading: locationsLoading } = useQuery({\n    queryKey: ['locations'],\n    queryFn: locationsApi.list,\n  });\n\n  const { data: locationLogs = [], isLoading: logsLoading } = useQuery({\n    queryKey: ['location-logs'],\n    queryFn: locationsApi.logs,\n  });\n\n  const createLocationMutation = useMutation({\n    mutationFn: (data: any) => locationsApi.list(), // This should be locationsApi.create but not implemented in API\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['locations'] });\n      setShowForm(false);\n      setFormData({ name: '', address: '', context: '', lat: 0, lng: 0 });\n      toast({ title: 'Location saved successfully' });\n    },\n  });\n\n  const logLocationMutation = useMutation({\n    mutationFn: ({ lat, lng }: { lat: number; lng: number }) =>\n      locationsApi.logLocation(lat, lng),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['location-logs'] });\n      toast({ title: 'Current location recorded' });\n    },\n  });\n\n  const getCurrentLocation = () => {\n    setIsLocating(true);\n    if (!navigator.geolocation) {\n      toast({\n        title: 'Location not available',\n        description: 'Your browser does not support location services',\n        variant: 'destructive',\n      });\n      setIsLocating(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        logLocationMutation.mutate({ lat: latitude, lng: longitude });\n        setIsLocating(false);\n      },\n      (error) => {\n        toast({\n          title: 'Location error',\n          description: 'Could not get your current location',\n          variant: 'destructive',\n        });\n        setIsLocating(false);\n      },\n      { timeout: 10000, enableHighAccuracy: true }\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.address) return;\n    \n    // For demo, we'll use a mock coordinate\n    createLocationMutation.mutate({\n      ...formData,\n      lat: 37.7749,\n      lng: -122.4194,\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (locationsLoading || logsLoading) {\n    return <div className=\"p-8\">Loading locations...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"locations-title\">\n            Locations\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Track important places and your location history\n          </p>\n        </div>\n        <div className=\"flex space-x-4\">\n          <Button \n            onClick={getCurrentLocation}\n            disabled={isLocating || logLocationMutation.isPending}\n            data-testid=\"button-record-location\"\n          >\n            <Navigation className=\"w-4 h-4 mr-2\" />\n            {isLocating ? 'Getting Location...' : 'Record Current Location'}\n          </Button>\n          <Button \n            onClick={() => setShowForm(!showForm)}\n            variant=\"outline\"\n            data-testid=\"button-add-location\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Place\n          </Button>\n        </div>\n      </div>\n\n      {/* Add Location Form */}\n      {showForm && (\n        <Card className=\"mb-8\" data-testid=\"card-add-location\">\n          <CardHeader>\n            <CardTitle>Add Important Place</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Place Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    placeholder=\"Home, Doctor's Office, etc.\"\n                    required\n                    data-testid=\"input-location-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Input\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    placeholder=\"123 Main St, City, State\"\n                    required\n                    data-testid=\"input-location-address\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"context\">Notes</Label>\n                <Textarea\n                  id=\"context\"\n                  value={formData.context}\n                  onChange={(e) => handleInputChange('context', e.target.value)}\n                  placeholder=\"Additional details about this place\"\n                  data-testid=\"textarea-location-context\"\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={createLocationMutation.isPending}\n                  data-testid=\"button-save-location\"\n                >\n                  {createLocationMutation.isPending ? 'Saving...' : 'Save Place'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowForm(false)}\n                  data-testid=\"button-cancel-location\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Important Places */}\n        <Card data-testid=\"card-important-places\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Important Places</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {locations.length === 0 ? (\n                <div className=\"text-center py-8\" data-testid=\"empty-locations\">\n                  <MapPin className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">No places saved</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Add important places to remember them easily\n                  </p>\n                  <Button onClick={() => setShowForm(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Place\n                  </Button>\n                </div>\n              ) : (\n                locations.map((location: any) => (\n                  <div key={location.id} className=\"p-4 border border-border rounded-lg\" data-testid={`location-${location.id}`}>\n                    <div className=\"flex items-start space-x-3\">\n                      <MapPin className=\"w-5 h-5 text-primary mt-1\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-card-foreground\">{location.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{location.address}</p>\n                        {location.context && (\n                          <p className=\"text-sm text-muted-foreground mt-1\">{location.context}</p>\n                        )}\n                      </div>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => window.open(`https://www.openstreetmap.org/?mlat=${location.lat}&mlon=${location.lng}&zoom=15`)}\n                        data-testid={`button-view-map-${location.id}`}\n                      >\n                        View Map\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Location History */}\n        <Card data-testid=\"card-location-history\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Location History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {locationLogs.length === 0 ? (\n                <div className=\"text-center py-8\" data-testid=\"empty-location-logs\">\n                  <Clock className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">No location history</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Record your current location to start tracking\n                  </p>\n                  <Button onClick={getCurrentLocation} disabled={isLocating}>\n                    <Navigation className=\"w-4 h-4 mr-2\" />\n                    Record Location\n                  </Button>\n                </div>\n              ) : (\n                locationLogs.slice(0, 10).map((log: any) => {\n                  const logId = `log-${log.id}`;\n                  const hasAddress = locationAddresses[logId];\n                  const isLoading = loadingAddresses[logId];\n                  \n                  // Load address if not already loaded\n                  if (!hasAddress && !isLoading) {\n                    loadAddressForLocation(logId, log.lat, log.lng);\n                  }\n                  \n                  return (\n                    <div key={log.id} className=\"p-4 bg-muted rounded-lg\" data-testid={`location-log-${log.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Navigation className=\"w-4 h-4 text-secondary\" />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              {isLoading && <Loader2 className=\"w-3 h-3 animate-spin\" />}\n                              <p className=\"text-sm font-medium\">\n                                {hasAddress || `${log.lat.toFixed(4)}, ${log.lng.toFixed(4)}`}\n                              </p>\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {new Date(log.recorded_at).toLocaleString()}\n                            </p>\n                            {hasAddress && (\n                              <p className=\"text-xs text-muted-foreground\">\n                                {log.lat.toFixed(6)}, {log.lng.toFixed(6)}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => window.open(`https://www.openstreetmap.org/?mlat=${log.lat}&mlon=${log.lng}&zoom=15`)}\n                          data-testid={`button-view-log-map-${log.id}`}\n                        >\n                          View\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14537},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Brain } from 'lucide-react';\n\nexport default function Login() {\n  const [email, setEmail] = useState('demo@memocare.local');\n  const [password, setPassword] = useState('demo123');\n  const { login, isLoginPending, loginError } = useAuthContext();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    login({ email, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n            <Brain className=\"text-2xl text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl\" data-testid=\"login-title\">Welcome to Memocare</CardTitle>\n          <CardDescription>Sign in to your care assistant</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            {loginError && (\n              <div className=\"text-sm text-destructive\" data-testid=\"login-error\">\n                {loginError.message}\n              </div>\n            )}\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoginPending}\n              data-testid=\"button-login\"\n            >\n              {isLoginPending ? 'Signing in...' : 'Sign In'}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{' '}\n              <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Sign up\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2973},"client/src/pages/Medications.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { medicationsApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Pill, Check, X, Clock } from 'lucide-react';\n\nexport default function Medications() {\n  const [showForm, setShowForm] = useState(false);\n  const [name, setName] = useState('');\n  const [dosage, setDosage] = useState('');\n  const [notes, setNotes] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: medications = [], isLoading } = useQuery({\n    queryKey: ['medications'],\n    queryFn: medicationsApi.list,\n  });\n\n  // Get all medication logs at once for all medications\n  const medicationIds = medications.map((m: any) => m.id);\n  const { data: allLogs = {} } = useQuery({\n    queryKey: ['all-medication-logs', medicationIds],\n    queryFn: async () => {\n      if (medicationIds.length === 0) return {};\n      const logsPromises = medicationIds.map((id: number) => \n        medicationsApi.logs(id).then(logs => ({ [id]: logs }))\n      );\n      const logsArray = await Promise.all(logsPromises);\n      return logsArray.reduce((acc, logs) => ({ ...acc, ...logs }), {});\n    },\n    enabled: medicationIds.length > 0,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => medicationsApi.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['medications'] });\n      setShowForm(false);\n      setName('');\n      setDosage('');\n      setNotes('');\n      toast({ title: 'Medication added successfully' });\n    },\n  });\n\n  const logDoseMutation = useMutation({\n    mutationFn: ({ id, status }: { id: number; status: 'taken' | 'missed' }) =>\n      medicationsApi.logDose(id, status, new Date().toISOString()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['medications'] });\n      queryClient.invalidateQueries({ queryKey: ['all-medication-logs'] });\n      toast({ title: 'Dose logged successfully' });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name || !dosage) return;\n\n    createMutation.mutate({ name, dosage, notes });\n  };\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading medications...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"medications-title\">\n            Medications\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Track your medications and log doses\n          </p>\n        </div>\n        <Button \n          onClick={() => setShowForm(!showForm)}\n          data-testid=\"button-add-medication\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Medication\n        </Button>\n      </div>\n\n      {/* Add Medication Form */}\n      {showForm && (\n        <Card className=\"mb-8\" data-testid=\"card-add-medication\">\n          <CardHeader>\n            <CardTitle>Add New Medication</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Medication Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    placeholder=\"Aricept\"\n                    required\n                    data-testid=\"input-medication-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"dosage\">Dosage</Label>\n                  <Input\n                    id=\"dosage\"\n                    value={dosage}\n                    onChange={(e) => setDosage(e.target.value)}\n                    placeholder=\"10mg\"\n                    required\n                    data-testid=\"input-medication-dosage\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  placeholder=\"Take with breakfast\"\n                  data-testid=\"textarea-medication-notes\"\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending}\n                  data-testid=\"button-save-medication\"\n                >\n                  {createMutation.isPending ? 'Adding...' : 'Add Medication'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowForm(false)}\n                  data-testid=\"button-cancel-medication\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Medications List */}\n      <div className=\"space-y-6\">\n        {medications.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-8\">\n              <div className=\"text-center\" data-testid=\"empty-medications\">\n                <Pill className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No medications added</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Add your first medication to start tracking\n                </p>\n                <Button onClick={() => setShowForm(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Medication\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          medications.map((medication: any) => {\n            const logs = allLogs[medication.id] || [];\n\n            // Get last 7 days\n            const last7Days = Array.from({ length: 7 }, (_, i) => {\n              const date = new Date();\n              date.setDate(date.getDate() - (6 - i));\n              return date.toDateString();\n            });\n\n            // Map logs to days\n            const logsByDay = logs.reduce((acc: any, log: any) => {\n              const logDate = new Date(log.taken_at).toDateString();\n              acc[logDate] = log;\n              return acc;\n            }, {});\n\n            return (\n              <Card key={medication.id} data-testid={`medication-card-${medication.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"text-xl font-semibold text-card-foreground\">\n                        {medication.name}\n                      </h3>\n                      <p className=\"text-muted-foreground\">\n                        {medication.dosage} {medication.notes && ` • ${medication.notes}`}\n                      </p>\n                      {logs.length > 0 && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Last taken: {new Date(logs[logs.length - 1]?.taken_at).toLocaleString()}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => logDoseMutation.mutate({ id: medication.id, status: 'taken' })}\n                        disabled={logDoseMutation.isPending}\n                        data-testid={`button-log-taken-${medication.id}`}\n                      >\n                        <Check className=\"w-4 h-4 mr-1\" />\n                        Taken\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => logDoseMutation.mutate({ id: medication.id, status: 'missed' })}\n                        disabled={logDoseMutation.isPending}\n                        data-testid={`button-log-missed-${medication.id}`}\n                      >\n                        <X className=\"w-4 h-4 mr-1\" />\n                        Missed\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Weekly Progress with real data */}\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-muted-foreground\">Last 7 days:</span>\n                    <div className=\"flex space-x-1\">\n                      {last7Days.map((day, index) => {\n                        const log = logsByDay[day];\n                        const status = log?.status;\n                        \n                        return (\n                          <div\n                            key={index}\n                            className={`w-8 h-8 rounded flex items-center justify-center ${\n                              status === 'taken'\n                                ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300' \n                                : status === 'missed'\n                                ? 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'\n                                : 'bg-muted text-muted-foreground'\n                            }`}\n                            data-testid={`medication-day-${medication.id}-${index}`}\n                            title={log ? `${status} on ${new Date(log.taken_at).toLocaleDateString()}` : `No data for ${new Date(day).toLocaleDateString()}`}\n                          >\n                            {status === 'taken' ? (\n                              <Check className=\"w-3 h-3\" />\n                            ) : status === 'missed' ? (\n                              <X className=\"w-3 h-3\" />\n                            ) : (\n                              <Clock className=\"w-3 h-3\" />\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10751},"client/src/pages/MemoryWall.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { memoryApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Images, Camera, Video, Music, Search, Filter } from 'lucide-react';\n\nexport default function MemoryWall() {\n  const [showUploadForm, setShowUploadForm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [tagFilter, setTagFilter] = useState('all');\n  const [uploadData, setUploadData] = useState({\n    title: '',\n    tags: '',\n    type: '',\n  });\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [viewingMemory, setViewingMemory] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: memoryItems = [], isLoading } = useQuery({\n    queryKey: ['memory'],\n    queryFn: memoryApi.list,\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: (formData: FormData) => memoryApi.create(formData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['memory'] });\n      setShowUploadForm(false);\n      setUploadData({ title: '', tags: '', type: '' });\n      setSelectedFile(null);\n      toast({ title: 'Memory uploaded successfully' });\n    },\n  });\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    setSelectedFile(file);\n    \n    // Auto-detect type based on file\n    if (file.type.startsWith('image/')) {\n      setUploadData(prev => ({ ...prev, type: 'photo' }));\n    } else if (file.type.startsWith('video/')) {\n      setUploadData(prev => ({ ...prev, type: 'video' }));\n    } else if (file.type.startsWith('audio/')) {\n      setUploadData(prev => ({ ...prev, type: 'audio' }));\n    }\n  };\n\n  const handleUpload = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedFile || !uploadData.title || !uploadData.type) {\n      toast({\n        title: 'Missing information',\n        description: 'Please select a file, enter a title, and specify the type',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    formData.append('title', uploadData.title);\n    formData.append('type', uploadData.type);\n    formData.append('tags', uploadData.tags);\n\n    uploadMutation.mutate(formData);\n  };\n\n  // Get unique tags for filter\n  const allTags = Array.from(\n    new Set(\n      memoryItems\n        .flatMap((item: any) => item.tags ? item.tags.split(',').map((tag: string) => tag.trim()) : [])\n        .filter(Boolean)\n    )\n  );\n\n  const filteredMemories = memoryItems.filter((item: any) => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (item.tags && item.tags.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesType = typeFilter === 'all' || item.type === typeFilter;\n    const matchesTag = tagFilter === 'all' || (item.tags && item.tags.includes(tagFilter));\n    return matchesSearch && matchesType && matchesTag;\n  });\n\n  const getMemoryIcon = (type: string) => {\n    switch (type) {\n      case 'photo': return <Camera className=\"w-4 h-4\" />;\n      case 'video': return <Video className=\"w-4 h-4\" />;\n      case 'audio': return <Music className=\"w-4 h-4\" />;\n      default: return <Images className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading memory wall...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"memory-wall-title\">\n            Memory Wall\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Your collection of precious moments and memories\n          </p>\n        </div>\n        <Button \n          onClick={() => setShowUploadForm(!showUploadForm)}\n          data-testid=\"button-add-memory\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Memory\n        </Button>\n      </div>\n\n      {/* Upload Form */}\n      {showUploadForm && (\n        <Card className=\"mb-8\" data-testid=\"card-upload-memory\">\n          <CardHeader>\n            <CardTitle>Upload New Memory</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleUpload} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"file\">Choose File</Label>\n                <Input\n                  id=\"file\"\n                  type=\"file\"\n                  accept=\"image/*,video/*,audio/*\"\n                  onChange={handleFileSelect}\n                  required\n                  data-testid=\"input-memory-file\"\n                />\n                {selectedFile && (\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={uploadData.title}\n                    onChange={(e) => setUploadData(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Family dinner, Birthday party, etc.\"\n                    required\n                    data-testid=\"input-memory-title\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"type\">Type</Label>\n                  <Select \n                    value={uploadData.type} \n                    onValueChange={(value) => setUploadData(prev => ({ ...prev, type: value }))}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-memory-type\">\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"photo\">Photo</SelectItem>\n                      <SelectItem value=\"video\">Video</SelectItem>\n                      <SelectItem value=\"audio\">Audio</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                <Input\n                  id=\"tags\"\n                  value={uploadData.tags}\n                  onChange={(e) => setUploadData(prev => ({ ...prev, tags: e.target.value }))}\n                  placeholder=\"family, celebration, birthday, etc.\"\n                  data-testid=\"input-memory-tags\"\n                />\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={uploadMutation.isPending}\n                  data-testid=\"button-upload-memory\"\n                >\n                  {uploadMutation.isPending ? 'Uploading...' : 'Upload Memory'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowUploadForm(false)}\n                  data-testid=\"button-cancel-upload\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filter Controls */}\n      <Card className=\"mb-8\" data-testid=\"card-filters\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search memories by title or tag...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 text-lg\"\n                  data-testid=\"input-search-memories\"\n                />\n              </div>\n            </div>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-type-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"photo\">Photos</SelectItem>\n                <SelectItem value=\"video\">Videos</SelectItem>\n                <SelectItem value=\"audio\">Audio</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={tagFilter} onValueChange={setTagFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-tag-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Tags</SelectItem>\n                {allTags.map(tag => (\n                  <SelectItem key={tag} value={tag}>{tag}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Memory Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {filteredMemories.length === 0 ? (\n          <div className=\"col-span-full\">\n            <Card>\n              <CardContent className=\"py-8\">\n                <div className=\"text-center\" data-testid=\"empty-memories\">\n                  <Images className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">\n                    {searchTerm || typeFilter !== 'all' || tagFilter !== 'all' \n                      ? 'No memories found' \n                      : 'No memories uploaded'\n                    }\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchTerm || typeFilter !== 'all' || tagFilter !== 'all'\n                      ? 'Try adjusting your search or filters'\n                      : 'Upload your first memory to get started'\n                    }\n                  </p>\n                  {!searchTerm && typeFilter === 'all' && tagFilter === 'all' && (\n                    <Button onClick={() => setShowUploadForm(true)}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Memory\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <>\n            {filteredMemories.map((memory: any) => (\n              <Card key={memory.id} className=\"overflow-hidden hover:shadow-lg transition-shadow group\" data-testid={`memory-${memory.id}`}>\n                <div \n                  className=\"relative aspect-square overflow-hidden cursor-pointer\"\n                  onClick={() => setViewingMemory(memory)}\n                >\n                  {memory.type === 'photo' ? (\n                    <img \n                      src={memory.file_path} \n                      alt={memory.title}\n                      className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                      onError={(e) => {\n                        // Fallback to placeholder if image fails to load\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                        target.nextElementSibling?.classList.remove('hidden');\n                      }}\n                    />\n                  ) : memory.type === 'video' ? (\n                    <video \n                      src={memory.file_path}\n                      className=\"w-full h-full object-cover\"\n                      preload=\"metadata\"\n                      onError={(e) => {\n                        // Fallback to placeholder if video fails to load\n                        const target = e.target as HTMLVideoElement;\n                        target.style.display = 'none';\n                        target.nextElementSibling?.classList.remove('hidden');\n                      }}\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-gradient-to-br from-accent to-primary flex items-center justify-center\">\n                      <Music className=\"w-12 h-12 text-white\" />\n                      <div className=\"absolute bottom-2 left-2 text-white text-sm bg-black/50 px-2 py-1 rounded\">\n                        Audio\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Fallback placeholders (hidden by default, shown on error) */}\n                  <div className=\"absolute inset-0 bg-muted flex items-center justify-center hidden\">\n                    {memory.type === 'photo' ? (\n                      <Camera className=\"w-12 h-12 text-muted-foreground\" />\n                    ) : (\n                      <Video className=\"w-12 h-12 text-muted-foreground\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"absolute top-2 right-2 bg-black/50 rounded-full p-2\">\n                    {getMemoryIcon(memory.type)}\n                  </div>\n                  \n                  {memory.type === 'video' && (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"w-16 h-16 bg-black/50 rounded-full flex items-center justify-center hover:bg-black/70 transition-colors cursor-pointer\">\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"text-white\">\n                          <path d=\"M8 5v14l11-7z\" fill=\"currentColor\"/>\n                        </svg>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-card-foreground mb-2\">{memory.title}</h3>\n                  \n                  {memory.tags && (\n                    <div className=\"flex flex-wrap gap-1 mb-3\">\n                      {memory.tags.split(',').map((tag: string, index: number) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tag.trim()}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                  \n                  <p className=\"text-sm text-muted-foreground\">\n                    Added {new Date(memory.created_at).toLocaleDateString()}\n                    {memory.type === 'audio' && ' • Audio recording'}\n                    {memory.type === 'video' && ' • Video file'}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {/* Upload New Memory Card */}\n            <Card \n              className=\"border-2 border-dashed border-border hover:border-primary hover:bg-primary/5 transition-all cursor-pointer\" \n              onClick={() => setShowUploadForm(true)}\n              data-testid=\"card-upload-new\"\n            >\n              <div className=\"aspect-square flex items-center justify-center\">\n                <div className=\"text-center py-8\">\n                  <Plus className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-xl font-semibold text-card-foreground mb-2\">Add Memory</h3>\n                  <p className=\"text-muted-foreground\">Upload photo, video, or audio</p>\n                </div>\n              </div>\n            </Card>\n          </>\n        )}\n      </div>\n\n      {/* Media Viewer Modal */}\n      {viewingMemory && (\n        <div \n          className=\"fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4\"\n          onClick={() => setViewingMemory(null)}\n        >\n          <div \n            className=\"max-w-4xl max-h-full bg-white rounded-lg overflow-hidden\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"p-4 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-xl font-semibold\">{viewingMemory.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {new Date(viewingMemory.created_at).toLocaleDateString()}\n                  </p>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setViewingMemory(null)}\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              {viewingMemory.type === 'photo' ? (\n                <img \n                  src={viewingMemory.file_path} \n                  alt={viewingMemory.title}\n                  className=\"max-w-full max-h-[70vh] object-contain\"\n                />\n              ) : viewingMemory.type === 'video' ? (\n                <video \n                  src={viewingMemory.file_path}\n                  controls\n                  className=\"max-w-full max-h-[70vh]\"\n                  autoPlay\n                />\n              ) : (\n                <div className=\"p-8 text-center\">\n                  <Music className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                  <audio \n                    src={viewingMemory.file_path}\n                    controls\n                    className=\"w-full max-w-md mx-auto\"\n                    autoPlay\n                  />\n                </div>\n              )}\n            </div>\n            \n            {viewingMemory.tags && (\n              <div className=\"p-4 border-t\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {viewingMemory.tags.split(',').map((tag: string, index: number) => (\n                    <Badge key={index} variant=\"secondary\">\n                      {tag.trim()}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":18970},"client/src/pages/Register.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Brain } from 'lucide-react';\n\nexport default function Register() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { register, isRegisterPending, registerError } = useAuthContext();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    register({ email, password, name });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center\">\n            <Brain className=\"text-2xl text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl\" data-testid=\"register-title\">Join Memocare</CardTitle>\n          <CardDescription>Create your care assistant account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n                data-testid=\"input-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            {registerError && (\n              <div className=\"text-sm text-destructive\" data-testid=\"register-error\">\n                {registerError.message}\n              </div>\n            )}\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isRegisterPending}\n              data-testid=\"button-register\"\n            >\n              {isRegisterPending ? 'Creating account...' : 'Create Account'}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{' '}\n              <Link href=\"/\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3397},"client/src/pages/Reminders.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { remindersApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Bell, Pill, Calendar, ListTodo, Trash2 } from 'lucide-react';\n\nexport default function Reminders() {\n  const [showForm, setShowForm] = useState(false);\n  const [title, setTitle] = useState('');\n  const [type, setType] = useState('');\n  const [schedule, setSchedule] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: reminders = [], isLoading } = useQuery({\n    queryKey: ['reminders'],\n    queryFn: remindersApi.list,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => remindersApi.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['reminders'] });\n      setShowForm(false);\n      setTitle('');\n      setType('');\n      setSchedule('');\n      toast({ title: 'Reminder created successfully' });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => remindersApi.delete(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['reminders'] });\n      toast({ title: 'Reminder deleted' });\n    },\n  });\n\n  const toggleMutation = useMutation({\n    mutationFn: ({ id, active }: { id: number; active: boolean }) => \n      remindersApi.update(id, { active }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['reminders'] });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title || !type || !schedule) return;\n\n    const nextRun = new Date();\n    if (schedule === 'hourly') {\n      nextRun.setHours(nextRun.getHours() + 1);\n    } else if (schedule === 'daily') {\n      nextRun.setDate(nextRun.getDate() + 1);\n    }\n\n    createMutation.mutate({\n      title,\n      type,\n      schedule_cron: schedule === 'hourly' ? '0 * * * *' : '0 9 * * *',\n      next_run_at: nextRun.toISOString(),\n    });\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'medication': return <Pill className=\"w-5 h-5\" />;\n      case 'appointment': return <Calendar className=\"w-5 h-5\" />;\n      case 'task': return <ListTodo className=\"w-5 h-5\" />;\n      default: return <Bell className=\"w-5 h-5\" />;\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading reminders...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"reminders-title\">\n            Reminders\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Stay on top of your daily tasks and medications\n          </p>\n        </div>\n        <Button \n          onClick={() => setShowForm(!showForm)}\n          data-testid=\"button-add-reminder\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Reminder\n        </Button>\n      </div>\n\n      {/* Add Reminder Form */}\n      {showForm && (\n        <Card className=\"mb-8\" data-testid=\"card-add-reminder\">\n          <CardHeader>\n            <CardTitle>Create New Reminder</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    placeholder=\"Take morning medication\"\n                    required\n                    data-testid=\"input-reminder-title\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"type\">Type</Label>\n                  <Select value={type} onValueChange={setType} required>\n                    <SelectTrigger data-testid=\"select-reminder-type\">\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"medication\">Medication</SelectItem>\n                      <SelectItem value=\"meal\">Meal</SelectItem>\n                      <SelectItem value=\"appointment\">Appointment</SelectItem>\n                      <SelectItem value=\"task\">Task</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"schedule\">Schedule</Label>\n                <Select value={schedule} onValueChange={setSchedule} required>\n                  <SelectTrigger data-testid=\"select-reminder-schedule\">\n                    <SelectValue placeholder=\"Select schedule\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"hourly\">Every Hour</SelectItem>\n                    <SelectItem value=\"daily\">Daily at 9:00 AM</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending}\n                  data-testid=\"button-save-reminder\"\n                >\n                  {createMutation.isPending ? 'Creating...' : 'Create Reminder'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowForm(false)}\n                  data-testid=\"button-cancel-reminder\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reminders List */}\n      <div className=\"space-y-4\">\n        {reminders.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-8\">\n              <div className=\"text-center\" data-testid=\"empty-reminders\">\n                <Bell className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No reminders yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create your first reminder to stay organized\n                </p>\n                <Button onClick={() => setShowForm(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Reminder\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          reminders.map((reminder: any) => (\n            <Card key={reminder.id} data-testid={`reminder-card-${reminder.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center justify-center w-12 h-12 bg-primary/10 rounded-full\">\n                      {getTypeIcon(reminder.type)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-card-foreground\">\n                        {reminder.title}\n                      </h3>\n                      <p className=\"text-muted-foreground\">\n                        {reminder.type} • Next: {new Date(reminder.next_run_at).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Label htmlFor={`active-${reminder.id}`}>Active</Label>\n                      <Switch\n                        id={`active-${reminder.id}`}\n                        checked={reminder.active}\n                        onCheckedChange={(checked) => \n                          toggleMutation.mutate({ id: reminder.id, active: checked })\n                        }\n                        data-testid={`switch-reminder-active-${reminder.id}`}\n                      />\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(reminder.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-reminder-${reminder.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9245},"client/src/pages/Routines.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { routinesApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Progress } from '@/components/ui/progress';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, List, Check, X, Edit } from 'lucide-react';\n\nexport default function Routines() {\n  const [showRoutineForm, setShowRoutineForm] = useState(false);\n  const [showTaskForm, setShowTaskForm] = useState<number | null>(null);\n  const [routineData, setRoutineData] = useState({\n    title: '',\n    description: '',\n  });\n  const [taskData, setTaskData] = useState<{ [routineId: number]: { title: string } }>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: routines = [], isLoading } = useQuery({\n    queryKey: ['routines'],\n    queryFn: routinesApi.list,\n  });\n\n  const createRoutineMutation = useMutation({\n    mutationFn: (data: any) => routinesApi.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['routines'] });\n      setShowRoutineForm(false);\n      setRoutineData({ title: '', description: '' });\n      toast({ title: 'Routine created successfully' });\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: ({ routineId, task }: { routineId: number; task: any }) =>\n      routinesApi.createTask(routineId, task),\n    onSuccess: (_, { routineId }) => {\n      queryClient.invalidateQueries({ queryKey: ['routines'] });\n      setShowTaskForm(null);\n      setTaskData(prev => ({ ...prev, [routineId]: { title: '' } }));\n      toast({ title: 'Task added successfully' });\n    },\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: ({ taskId, updates }: { taskId: number; updates: any }) =>\n      routinesApi.updateTask(taskId, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['routines'] });\n      queryClient.invalidateQueries({ queryKey: ['routine-tasks'] });\n    },\n  });\n\n  // Fetch tasks for each routine\n  const useRoutineTasks = (routineId: number) => {\n    return useQuery({\n      queryKey: ['routine-tasks', routineId],\n      queryFn: () => routinesApi.tasks(routineId),\n    });\n  };\n\n  const handleCreateRoutine = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!routineData.title) return;\n    createRoutineMutation.mutate(routineData);\n  };\n\n  const handleCreateTask = (routineId: number) => (e: React.FormEvent) => {\n    e.preventDefault();\n    const currentTaskData = taskData[routineId] || { title: '' };\n    if (!currentTaskData.title) return;\n    createTaskMutation.mutate({ routineId, task: currentTaskData });\n  };\n\n  const toggleTask = (taskId: number, done: boolean) => {\n    updateTaskMutation.mutate({ taskId, updates: { done } });\n  };\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading routines...</div>;\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-4xl font-semibold text-foreground mb-2\" data-testid=\"routines-title\">\n            Routines & Tasks\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Organize your daily activities with structured routines\n          </p>\n        </div>\n        <Button \n          onClick={() => setShowRoutineForm(!showRoutineForm)}\n          data-testid=\"button-add-routine\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Routine\n        </Button>\n      </div>\n\n      {/* Add Routine Form */}\n      {showRoutineForm && (\n        <Card className=\"mb-8\" data-testid=\"card-add-routine\">\n          <CardHeader>\n            <CardTitle>Create New Routine</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleCreateRoutine} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Routine Title</Label>\n                <Input\n                  id=\"title\"\n                  value={routineData.title}\n                  onChange={(e) => setRoutineData(prev => ({ ...prev, title: e.target.value }))}\n                  placeholder=\"Morning routine, Evening checklist, etc.\"\n                  required\n                  data-testid=\"input-routine-title\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={routineData.description}\n                  onChange={(e) => setRoutineData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Optional description of this routine\"\n                  data-testid=\"textarea-routine-description\"\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={createRoutineMutation.isPending}\n                  data-testid=\"button-save-routine\"\n                >\n                  {createRoutineMutation.isPending ? 'Creating...' : 'Create Routine'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowRoutineForm(false)}\n                  data-testid=\"button-cancel-routine\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Routines List */}\n      <div className=\"space-y-6\">\n        {routines.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-8\">\n              <div className=\"text-center\" data-testid=\"empty-routines\">\n                <List className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No routines created</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create your first routine to organize your daily activities\n                </p>\n                <Button onClick={() => setShowRoutineForm(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Routine\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          routines.map((routine: any) => <RoutineCard key={routine.id} routine={routine} />)\n        )}\n      </div>\n    </div>\n  );\n\n  function RoutineCard({ routine }: { routine: any }) {\n    const { data: tasks = [] } = useRoutineTasks(routine.id);\n    const completedTasks = tasks.filter((task: any) => task.done).length;\n    const progressPercentage = tasks.length > 0 ? (completedTasks / tasks.length) * 100 : 0;\n    const taskInputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n      if (showTaskForm === routine.id && taskInputRef.current) {\n        taskInputRef.current.focus();\n      }\n    }, [showTaskForm, routine.id]);\n\n    return (\n      <Card data-testid={`routine-card-${routine.id}`}>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-2xl\">{routine.title}</CardTitle>\n              {routine.description && (\n                <p className=\"text-muted-foreground mt-1\">{routine.description}</p>\n              )}\n              {tasks.length > 0 && (\n                <div className=\"mt-3\">\n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-1\">\n                    <span>Progress</span>\n                    <span>{completedTasks}/{tasks.length} completed</span>\n                  </div>\n                  <Progress value={progressPercentage} className=\"h-2\" />\n                </div>\n              )}\n            </div>\n            <div className=\"text-right ml-4\">\n              <div className=\"text-2xl font-semibold text-primary\">\n                {Math.round(progressPercentage)}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Complete</div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Task List */}\n          <div className=\"space-y-3 mb-4\">\n            {tasks.length === 0 ? (\n              <p className=\"text-muted-foreground italic\" data-testid={`empty-tasks-${routine.id}`}>\n                No tasks added yet\n              </p>\n            ) : (\n              tasks.map((task: any) => (\n                <div \n                  key={task.id} \n                  className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\"\n                  data-testid={`task-${task.id}`}\n                >\n                  <Checkbox\n                    checked={task.done}\n                    onCheckedChange={(checked) => toggleTask(task.id, !!checked)}\n                    data-testid={`checkbox-task-${task.id}`}\n                  />\n                  <span \n                    className={`flex-1 text-lg ${\n                      task.done ? 'line-through text-muted-foreground' : 'text-card-foreground'\n                    }`}\n                  >\n                    {task.title}\n                  </span>\n                  {task.done && (\n                    <Check className=\"w-5 h-5 text-accent\" />\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* Add Task Form */}\n          {showTaskForm === routine.id ? (\n            <form onSubmit={handleCreateTask(routine.id)} className=\"flex space-x-2\">\n              <Input\n                ref={taskInputRef}\n                value={taskData[routine.id]?.title || ''}\n                onChange={(e) => setTaskData(prev => ({ \n                  ...prev, \n                  [routine.id]: { title: e.target.value } \n                }))}\n                placeholder=\"Enter task title\"\n                required\n                data-testid={`input-task-${routine.id}`}\n              />\n              <Button \n                type=\"submit\" \n                size=\"sm\" \n                disabled={createTaskMutation.isPending}\n                data-testid={`button-save-task-${routine.id}`}\n              >\n                <Check className=\"w-4 h-4\" />\n              </Button>\n              <Button \n                type=\"button\" \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => setShowTaskForm(null)}\n                data-testid={`button-cancel-task-${routine.id}`}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </form>\n          ) : (\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setShowTaskForm(routine.id)}\n              data-testid={`button-add-task-${routine.id}`}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Task\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n}\n","size_bytes":11304},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/objectDetection.ts":{"content":"import * as tf from '@tensorflow/tfjs';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n\nlet model: cocoSsd.ObjectDetection | null = null;\n\nexport interface DetectedObject {\n  class: string;\n  score: number;\n  bbox: [number, number, number, number]; // [x, y, width, height]\n}\n\nexport interface ObjectSignature {\n  objects: DetectedObject[];\n  dominantObjects: string[]; // Top 3 most confident objects\n  objectCount: number;\n}\n\n// Initialize the COCO-SSD model\nexport const loadModel = async (): Promise<cocoSsd.ObjectDetection> => {\n  if (model) return model;\n  \n  try {\n    // Load the model\n    model = await cocoSsd.load();\n    return model;\n  } catch (error) {\n    console.error('Failed to load object detection model:', error);\n    throw new Error('Could not load object detection model');\n  }\n};\n\n// Detect objects in an image element\nexport const detectObjects = async (imageElement: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement): Promise<DetectedObject[]> => {\n  try {\n    const loadedModel = await loadModel();\n    const predictions = await loadedModel.detect(imageElement);\n    \n    return predictions.map(prediction => ({\n      class: prediction.class,\n      score: prediction.score,\n      bbox: prediction.bbox as [number, number, number, number]\n    }));\n  } catch (error) {\n    console.error('Object detection failed:', error);\n    return [];\n  }\n};\n\n// Create a visual signature for object matching\nexport const createObjectSignature = (detectedObjects: DetectedObject[]): ObjectSignature => {\n  // Filter objects with confidence > 0.5\n  const confidentObjects = detectedObjects.filter(obj => obj.score > 0.5);\n  \n  // Sort by confidence and get top 3\n  const sortedObjects = confidentObjects.sort((a, b) => b.score - a.score);\n  const dominantObjects = sortedObjects.slice(0, 3).map(obj => obj.class);\n  \n  return {\n    objects: confidentObjects,\n    dominantObjects,\n    objectCount: confidentObjects.length\n  };\n};\n\n// Calculate similarity between two object signatures\nexport const calculateSimilarity = (sig1: ObjectSignature, sig2: ObjectSignature): number => {\n  // Simple similarity based on shared dominant objects\n  const shared = sig1.dominantObjects.filter(obj => sig2.dominantObjects.includes(obj));\n  const total = new Set([...sig1.dominantObjects, ...sig2.dominantObjects]).size;\n  \n  if (total === 0) return 0;\n  \n  // Weight by confidence and object count similarity\n  const objectCountSimilarity = 1 - Math.abs(sig1.objectCount - sig2.objectCount) / Math.max(sig1.objectCount, sig2.objectCount, 1);\n  const objectSimilarity = shared.length / total;\n  \n  // Combine similarities (70% object overlap, 30% count similarity)\n  return (objectSimilarity * 0.7) + (objectCountSimilarity * 0.3);\n};\n\n// Find matches in stored object signatures\nexport const findMatches = (newSignature: ObjectSignature, storedSignatures: { id: number; signature: ObjectSignature; userTag: string }[]): Array<{ id: number; userTag: string; confidence: number }> => {\n  const matches = storedSignatures\n    .map(stored => ({\n      id: stored.id,\n      userTag: stored.userTag,\n      confidence: calculateSimilarity(newSignature, stored.signature)\n    }))\n    .filter(match => match.confidence > 0.4) // Minimum confidence threshold\n    .sort((a, b) => b.confidence - a.confidence);\n  \n  return matches.slice(0, 3); // Return top 3 matches\n};\n\n// Process an image for object recognition\nexport const processImageForRecognition = async (imageElement: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement) => {\n  const detectedObjects = await detectObjects(imageElement);\n  const signature = createObjectSignature(detectedObjects);\n  \n  return {\n    detectedObjects,\n    signature,\n    visualFeatures: JSON.stringify(signature) // Store as JSON string for database\n  };\n};","size_bytes":3799}},"version":1}